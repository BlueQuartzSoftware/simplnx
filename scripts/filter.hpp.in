#pragma once

#include "simplnx/Filter/FilterTraits.hpp"
#include "simplnx/Filter/IFilter.hpp"
#include "simplnx/simplnx_export.hpp"

namespace nx::core
{
class SIMPLNX_EXPORT @FILTER_NAME@ : public IFilter
{
public:
  @FILTER_NAME@() = default;
  ~@FILTER_NAME@() noexcept override = default;

  @FILTER_NAME@(const @FILTER_NAME@&) = delete;
  @FILTER_NAME@(@FILTER_NAME@&&) noexcept = delete;

  @FILTER_NAME@& operator=(const @FILTER_NAME@&) = delete;
  @FILTER_NAME@& operator=(@FILTER_NAME@&&) noexcept = delete;

  /**
   * @brief
   * @return
   */
  [[nodiscard]] std::string name() const override;

  /**
   * @brief
   * @return
   */
  [[nodiscard]] Uuid uuid() const override;

  /**
   * @brief
   * @return
   */
  [[nodiscard]] std::string humanName() const override;

  /**
   * @brief
   * @return
   */
  [[nodiscard]] Parameters parameters() const override;

  /**
   * @brief
   * @return
   */
  [[nodiscard]] UniquePointer clone() const override;

protected:
  /**
   * @brief
   * @param data
   * @param args
   * @return
   */
  PreflightResult preflightImpl(const DataStructure& data, const Arguments& args) const override;

  /**
   * @brief
   * @param data
   * @param args
   * @return
   */
  Result<> executeImpl(DataStructure& data, const Arguments& args) const override;
};
} // namespace nx::core

SIMPLNX_DEF_FILTER_TRAITS(nx::core, @FILTER_NAME@, "@UUID@");
