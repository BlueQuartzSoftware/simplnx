from typing import List
import complex as cx

#include "ITKImageProcessing/Common/ITKArrayHelper.hpp"
#include "ITKImageProcessing/Common/sitkCommon.hpp"

${PARAMETER_INCLUDES}

${ITK_FILTER_INCLUDE}

namespace cx${FILTER_NAME}
{
using ArrayOptionsType = ${ARRAY_OPTIONS};
${OUTPUT_TYPEDEF}
${ITK_FILTER_STRUCT}
} // namespace cx${FILTER_NAME}

class ITKGrayscaleFillholeImageFilter:
  K_SELECTED_IMAGE_GEOM_PATH_KEY = 'selected_image_geom_path'
  K_SELECTED_IMAGE_DATA_PATH_KEY = 'selected_image_data_path'
  K_OUTPUT_IMAGE_DATA_NAME_KEY = 'output_image_data_name'

  def uuid(self) -> cx.Uuid:
    return cx.Uuid('${UUID}')

  def human_name(self) -> str:
    return '${FILTER_HUMAN_NAME}'

  def class_name(self) -> str:
    return '${FILTER_NAME}'

  def name(self) -> str:
    return '${FILTER_NAME}'

  def default_tags(self) -> List[str]:
    return [self.class_name(), ${DEFAULT_TAGS}]

  def clone(self):
    return ${FILTER_NAME}()

  def parameters(self) -> cx.Parameters:
    params = cx.Parameters()

  ${PARAMETER_DEFS}
    params.insertSeparator(Parameters::Separator{"Required Input Cell Data"});
    params.insert(cx.GeometrySelectionParameter(${FILTER_NAME}.K_SELECTED_IMAGE_GEOM_PATH_KEY, "Image Geometry", "Select the Image Geometry Group from the DataStructure.", cx.DataPath('Image Geometry'), [cx.IGeometry.Type.Image]));
    params.insert(cx.ArraySelectionParameter(${FILTER_NAME}.K_SELECTED_IMAGE_DATA_PATH_KEY, "Input Image Data Array", "The image data that will be processed by this filter.", cx.DataPath(), ${INPUT_ARRAY_TYPES}));
    params.insertSeparator(Parameters::Separator{"Created Cell Data"});
    params.insert(cx.DataObjectNameParameter(${FILTER_NAME}.K_OUTPUT_IMAGE_DATA_NAME_KEY, "Output Image Data Array", "The result of the processing will be stored in this Data Array.", "Output Image Data"));

    return params;

  def preflight_impl(self, data_structure: cx.DataStructure, args: dict, message_handler: cx.IFilter.MessageHandler, should_cancel: cx.AtomicBoolProxy) -> cx.IFilter.PreflightResult:
    image_geom_path: cx.DataPath = args[${FILTER_NAME}.K_SELECTED_IMAGE_GEOM_PATH_KEY]
    selected_input_array: cx.DataPath = args[${FILTER_NAME}.K_SELECTED_IMAGE_DATA_PATH_KEY]
    output_array_name: str = args[${FILTER_NAME}.K_OUTPUT_IMAGE_DATA_NAME_KEY]
    output_array_path = selected_input_array.get_parent().create_child_path(output_array_name);

    output_actions = ${DATA_CHECK_DECL};
    return cx.IFilter.PreflightResult(output_actions)

  def execute_impl(self, data_structure: cx.DataStructure, args: dict, message_handler: cx.IFilter.MessageHandler, should_cancel: cx.AtomicBoolProxy) -> cx.IFilter.ExecuteResult:
    auto imageGeomPath = filterArgs.value<DataPath>(k_SelectedImageGeomPath_Key);
    auto selectedInputArray = filterArgs.value<DataPath>(k_SelectedImageDataPath_Key);
    auto outputArrayName = filterArgs.value<DataObjectNameParameter::ValueType>(k_OutputImageDataPath_Key);
    const DataPath outputArrayPath = selectedInputArray.getParent().createChildPath(outputArrayName);

    ${PREFLIGHT_DEFS}

    ${ITK_FUNCTOR_DECL}

  ${LINK_OUTPUT_ARRAY} 
    
    return ${EXECUTE_DECL};
