from typing import List

import complex
import complex.GeneratedFileListParameter
import complex.IFilter
import os

class ITKAbsImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, input_image_data_path: complex.DataPath = ..., output_image_data_path: str = ..., selected_image_geom_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class ITKAcosImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, input_image_data_path: complex.DataPath = ..., output_image_data_path: str = ..., selected_image_geom_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class ITKAdaptiveHistogramEqualizationImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, alpha: float = ..., beta: float = ..., input_image_data_path: complex.DataPath = ..., output_image_data_path: str = ..., radius: List[float] = ..., selected_image_geom_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class ITKAsinImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, input_image_data_path: complex.DataPath = ..., output_image_data_path: str = ..., selected_image_geom_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class ITKAtanImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, input_image_data_path: complex.DataPath = ..., output_image_data_path: str = ..., selected_image_geom_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class ITKBinaryContourImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, background_value: float = ..., foreground_value: float = ..., fully_connected: bool = ..., input_image_data_path: complex.DataPath = ..., output_image_data_path: str = ..., selected_image_geom_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class ITKBinaryDilateImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, background_value: float = ..., boundary_to_foreground: bool = ..., foreground_value: float = ..., input_image_data_path: complex.DataPath = ..., kernel_radius: List[int] = ..., kernel_type: int = ..., output_image_data_path: str = ..., selected_image_geom_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class ITKBinaryErodeImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, background_value: float = ..., boundary_to_foreground: bool = ..., foreground_value: float = ..., input_image_data_path: complex.DataPath = ..., kernel_radius: List[int] = ..., kernel_type: int = ..., output_image_data_path: str = ..., selected_image_geom_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class ITKBinaryMorphologicalClosingImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, ForegroundValue: float = ..., InputImageDataPath: complex.DataPath = ..., KernelRadius: List[int] = ..., KernelType: int = ..., OutputImageDataPath: str = ..., SafeBorder: bool = ..., SelectedImageGeomPath: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class ITKBinaryMorphologicalOpeningImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, background_value: float = ..., foreground_value: float = ..., input_image_data_path: complex.DataPath = ..., kernel_radius: List[int] = ..., kernel_type: int = ..., output_image_data_path: str = ..., selected_image_geom_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class ITKBinaryOpeningByReconstructionImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, background_value: float = ..., foreground_value: float = ..., fully_connected: bool = ..., input_image_data_path: complex.DataPath = ..., kernel_radius: List[int] = ..., kernel_type: int = ..., output_image_data_path: str = ..., selected_image_geom_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class ITKBinaryProjectionImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, background_value: float = ..., foreground_value: float = ..., input_image_data_path: complex.DataPath = ..., output_image_data_path: str = ..., projection_dimension: int = ..., selected_image_geom_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class ITKBinaryThinningImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, input_image_data_path: complex.DataPath = ..., output_image_data_path: str = ..., selected_image_geom_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class ITKBinaryThresholdImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, input_image_data_path: complex.DataPath = ..., inside_value: int = ..., lower_threshold: float = ..., output_image_data_path: str = ..., outside_value: int = ..., selected_image_geom_path: complex.DataPath = ..., upper_threshold: float = ...) -> complex.IFilter.ExecuteResult: ...

class ITKBlackTopHatImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, input_image_data_path: complex.DataPath = ..., kernel_radius: List[int] = ..., kernel_type: int = ..., output_image_data_path: str = ..., safe_border: bool = ..., selected_image_geom_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class ITKClosingByReconstructionImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, fully_connected: bool = ..., input_image_data_path: complex.DataPath = ..., kernel_radius: List[int] = ..., kernel_type: int = ..., output_image_data_path: str = ..., preserve_intensities: bool = ..., selected_image_geom_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class ITKCosImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, input_image_data_path: complex.DataPath = ..., output_image_data_path: str = ..., selected_image_geom_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class ITKDilateObjectMorphologyImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, input_image_data_path: complex.DataPath = ..., kernel_radius: List[int] = ..., kernel_type: int = ..., object_value: float = ..., output_image_data_path: str = ..., selected_image_geom_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class ITKDiscreteGaussianImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, input_image_data_path: complex.DataPath = ..., maximum_error: List[float] = ..., maximum_kernel_width: int = ..., output_image_data_path: str = ..., selected_image_geom_path: complex.DataPath = ..., use_image_spacing: bool = ..., variance: List[float] = ...) -> complex.IFilter.ExecuteResult: ...

class ITKErodeObjectMorphologyImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, background_value: float = ..., input_image_data_path: complex.DataPath = ..., kernel_radius: List[int] = ..., kernel_type: int = ..., object_value: float = ..., output_image_data_path: str = ..., selected_image_geom_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class ITKExpImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, input_image_data_path: complex.DataPath = ..., output_image_data_path: str = ..., selected_image_geom_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class ITKExpNegativeImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, input_image_data_path: complex.DataPath = ..., output_image_data_path: str = ..., selected_image_geom_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class ITKGradientMagnitudeImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, input_image_data_path: complex.DataPath = ..., output_image_data_path: str = ..., selected_image_geom_path: complex.DataPath = ..., use_image_spacing: bool = ...) -> complex.IFilter.ExecuteResult: ...

class ITKGrayscaleDilateImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, input_image_data_path: complex.DataPath = ..., kernel_radius: List[int] = ..., kernel_type: int = ..., output_image_data_path: str = ..., selected_image_geom_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class ITKGrayscaleErodeImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, input_image_data_path: complex.DataPath = ..., kernel_radius: List[int] = ..., kernel_type: int = ..., output_image_data_path: str = ..., selected_image_geom_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class ITKGrayscaleFillholeImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, fully_connected: bool = ..., input_image_data_path: complex.DataPath = ..., output_image_data_path: str = ..., selected_image_geom_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class ITKGrayscaleGrindPeakImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, fully_connected: bool = ..., input_image_data_path: complex.DataPath = ..., output_image_data_path: str = ..., selected_image_geom_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class ITKGrayscaleMorphologicalClosingImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, input_image_data_path: complex.DataPath = ..., kernel_radius: List[int] = ..., kernel_type: int = ..., output_image_data_path: str = ..., safe_border: bool = ..., selected_image_geom_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class ITKGrayscaleMorphologicalOpeningImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, input_image_data_path: complex.DataPath = ..., kernel_radius: List[int] = ..., kernel_type: int = ..., output_image_data_path: str = ..., safe_border: bool = ..., selected_image_geom_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class ITKHConvexImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, fully_connected: bool = ..., height: float = ..., input_image_data_path: complex.DataPath = ..., output_image_data_path: str = ..., selected_image_geom_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class ITKHMaximaImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, height: float = ..., input_image_data_path: complex.DataPath = ..., output_image_data_path: str = ..., selected_image_geom_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class ITKHMinimaImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, fully_connected: bool = ..., height: float = ..., input_image_data_path: complex.DataPath = ..., output_image_data_path: str = ..., selected_image_geom_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class ITKImageReader(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, cell_data_name: str = ..., file_name: os.PathLike = ..., geometry_path: complex.DataPath = ..., image_data_array_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class ITKImageWriter(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, file_name: os.PathLike = ..., image_array_path: complex.DataPath = ..., image_geom_path: complex.DataPath = ..., index_offset: int = ..., plane: int = ...) -> complex.IFilter.ExecuteResult: ...

class ITKImportImageStack(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, cell_data_name: str = ..., image_data_array_path: str = ..., image_geometry_path: complex.DataPath = ..., image_transform_choice: int = ..., input_file_list_info: complex.GeneratedFileListParameter.ValueType = ..., origin: List[float] = ..., spacing: List[float] = ...) -> complex.IFilter.ExecuteResult: ...

class ITKIntensityWindowingImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, input_image_data_path: complex.DataPath = ..., output_image_data_path: str = ..., output_maximum: float = ..., output_minimum: float = ..., selected_image_geom_path: complex.DataPath = ..., window_maximum: float = ..., window_minimum: float = ...) -> complex.IFilter.ExecuteResult: ...

class ITKInvertIntensityImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, input_image_data_path: complex.DataPath = ..., maximum: float = ..., output_image_data_path: str = ..., selected_image_geom_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class ITKLabelContourImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, background_value: float = ..., fully_connected: bool = ..., input_image_data_path: complex.DataPath = ..., output_image_data_path: str = ..., selected_image_geom_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class ITKLog10Image(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, input_image_data_path: complex.DataPath = ..., output_image_data_path: str = ..., selected_image_geom_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class ITKLogImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, input_image_data_path: complex.DataPath = ..., output_image_data_path: str = ..., selected_image_geom_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class ITKMaskImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, input_image_data_path: complex.DataPath = ..., mask_image_data_path: complex.DataPath = ..., output_image_data_path: str = ..., outside_value: float = ..., selected_image_geom_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class ITKMedianImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, input_image_data_path: complex.DataPath = ..., output_image_data_path: str = ..., radius: List[int] = ..., selected_image_geom_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class ITKMhaFileReader(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, apply_image_transformation: bool = ..., cell_data_name: str = ..., file_name: os.PathLike = ..., geometry_path: complex.DataPath = ..., image_data_array_path: complex.DataPath = ..., interpolation_type: int = ..., save_image_transformation: bool = ..., transformation_matrix_data_array_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class ITKMorphologicalGradientImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, input_image_data_path: complex.DataPath = ..., kernel_radius: List[int] = ..., kernel_type: int = ..., output_image_data_path: str = ..., selected_image_geom_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class ITKMorphologicalWatershedImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, fully_connected: bool = ..., input_image_data_path: complex.DataPath = ..., level: float = ..., mark_watershed_line: bool = ..., output_image_data_path: str = ..., selected_image_geom_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class ITKNormalizeImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, input_image_data_path: complex.DataPath = ..., output_image_data_path: str = ..., selected_image_geom_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class ITKNotImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, input_image_data_path: complex.DataPath = ..., output_image_data_path: str = ..., selected_image_geom_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class ITKOpeningByReconstructionImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, fully_connected: bool = ..., input_image_data_path: complex.DataPath = ..., kernel_radius: List[int] = ..., kernel_type: int = ..., output_image_data_path: str = ..., preserve_intensities: bool = ..., selected_image_geom_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class ITKOtsuMultipleThresholdsImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, input_image_data_path: complex.DataPath = ..., label_offset: int = ..., number_of_histogram_bins: int = ..., number_of_thresholds: int = ..., output_image_data_path: str = ..., return_bin_midpoint: bool = ..., selected_image_geom_path: complex.DataPath = ..., valley_emphasis: bool = ...) -> complex.IFilter.ExecuteResult: ...

class ITKRelabelComponentImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, input_image_data_path: complex.DataPath = ..., minimum_object_size: int = ..., output_image_data_path: str = ..., selected_image_geom_path: complex.DataPath = ..., sort_by_object_size: bool = ...) -> complex.IFilter.ExecuteResult: ...

class ITKRescaleIntensityImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, input_image_data_path: complex.DataPath = ..., output_image_data_path: str = ..., output_maximum: float = ..., output_minimum: float = ..., selected_image_geom_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class ITKSigmoidImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, alpha: float = ..., beta: float = ..., input_image_data_path: complex.DataPath = ..., output_image_data_path: str = ..., output_maximum: float = ..., output_minimum: float = ..., selected_image_geom_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class ITKSignedMaurerDistanceMapImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, background_value: float = ..., input_image_data_path: complex.DataPath = ..., inside_is_positive: bool = ..., output_image_data_path: str = ..., selected_image_geom_path: complex.DataPath = ..., squared_distance: bool = ..., use_image_spacing: bool = ...) -> complex.IFilter.ExecuteResult: ...

class ITKSinImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, input_image_data_path: complex.DataPath = ..., output_image_data_path: str = ..., selected_image_geom_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class ITKSqrtImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, input_image_data_path: complex.DataPath = ..., output_image_data_path: str = ..., selected_image_geom_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class ITKSquareImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, input_image_data_path: complex.DataPath = ..., output_image_data_path: str = ..., selected_image_geom_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class ITKTanImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, input_image_data_path: complex.DataPath = ..., output_image_data_path: str = ..., selected_image_geom_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class ITKThresholdImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, input_image_data_path: complex.DataPath = ..., lower: float = ..., output_image_data_path: str = ..., outside_value: float = ..., selected_image_geom_path: complex.DataPath = ..., upper: float = ...) -> complex.IFilter.ExecuteResult: ...

class ITKValuedRegionalMaximaImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, fully_connected: bool = ..., input_image_data_path: complex.DataPath = ..., output_image_data_path: str = ..., selected_image_geom_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class ITKValuedRegionalMinimaImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, fully_connected: bool = ..., input_image_data_path: complex.DataPath = ..., output_image_data_path: str = ..., selected_image_geom_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class ITKWhiteTopHatImage(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, input_image_data_path: complex.DataPath = ..., kernel_radius: List[int] = ..., kernel_type: int = ..., output_image_data_path: str = ..., safe_border: bool = ..., selected_image_geom_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...
