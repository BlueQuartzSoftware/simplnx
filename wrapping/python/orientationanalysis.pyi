from typing import ClassVar, List, Set

import complex
import complex.GeneratedFileListParameter
import complex.IFilter
import os

class AlignSectionsMisorientationFilter(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, alignment_shift_file_name: os.PathLike = ..., cell_phases_array_path: complex.DataPath = ..., crystal_structures_array_path: complex.DataPath = ..., good_voxels_array_path: complex.DataPath = ..., misorientation_tolerance: float = ..., quats_array_path: complex.DataPath = ..., selected_image_geometry_path: complex.DataPath = ..., use_good_voxels: bool = ..., write_alignment_shifts: bool = ...) -> complex.IFilter.ExecuteResult: ...

class AlignSectionsMutualInformationFilter(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, alignment_shift_file_name: os.PathLike = ..., cell_phases_array_path: complex.DataPath = ..., crystal_structures_array_path: complex.DataPath = ..., good_voxels_array_path: complex.DataPath = ..., misorientation_tolerance: float = ..., quats_array_path: complex.DataPath = ..., selected_image_geometry_path: complex.DataPath = ..., use_good_voxels: bool = ..., write_alignment_shifts: bool = ...) -> complex.IFilter.ExecuteResult: ...

class BadDataNeighborOrientationCheckFilter(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, cell_phases_array_path: complex.DataPath = ..., crystal_structures_array_path: complex.DataPath = ..., good_voxels_array_path: complex.DataPath = ..., image_geometry_path: complex.DataPath = ..., misorientation_tolerance: float = ..., number_of_neighbors: int = ..., quats_array_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class CAxisSegmentFeaturesFilter(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, active_array_name: str = ..., cell_feature_attribute_matrix_name: str = ..., cell_phases_array_path: complex.DataPath = ..., crystal_structures_array_path: complex.DataPath = ..., feature_ids_array_name: str = ..., good_voxels_array_path: complex.DataPath = ..., image_geometry_path: complex.DataPath = ..., misorientation_tolerance: float = ..., quats_array_path: complex.DataPath = ..., randomize_feature_ids: bool = ..., use_good_voxels: bool = ...) -> complex.IFilter.ExecuteResult: ...

class ConvertOrientations(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, input_orientation_array_path: complex.DataPath = ..., input_type: int = ..., output_orientation_array_name: str = ..., output_type: int = ...) -> complex.IFilter.ExecuteResult: ...

class ConvertQuaternionFilter(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, conversion_type: int = ..., delete_original_data: bool = ..., output_data_array_path: str = ..., quaternion_data_array_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class CreateEnsembleInfoFilter(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, cell_ensemble_attribute_matrix_name: complex.DataPath = ..., crystal_structures_array_name: str = ..., ensemble: List[List[str[3]]] = ..., phase_names_array_name: str = ..., phase_types_array_name: str = ...) -> complex.IFilter.ExecuteResult: ...

class EBSDSegmentFeaturesFilter(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, active_array_name: str = ..., cell_feature_attribute_matrix_name: str = ..., cell_phases_array_path: complex.DataPath = ..., crystal_structures_array_path: complex.DataPath = ..., feature_ids_array_name: str = ..., good_voxels_array_path: complex.DataPath = ..., grid_geometry_path: complex.DataPath = ..., misorientation_tolerance: float = ..., quats_array_path: complex.DataPath = ..., randomize_features: bool = ..., use_good_voxels: bool = ...) -> complex.IFilter.ExecuteResult: ...

class EbsdToH5EbsdFilter(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, input_file_list_info: complex.GeneratedFileListParameter.ValueType = ..., output_file_path: os.PathLike = ..., reference_frame: int = ..., stacking_order: int = ..., z_spacing: float = ...) -> complex.IFilter.ExecuteResult: ...

class EnsembleInfoReaderFilter(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, cell_ensemble_attribute_matrix_name: str = ..., crystal_structures_array_name: str = ..., data_container_name: complex.DataPath = ..., input_file: os.PathLike = ..., phase_types_array_name: str = ...) -> complex.IFilter.ExecuteResult: ...

class ExportGBCDGMTFileFilter(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, crystal_structures_array_path: complex.DataPath = ..., g_bc_darray_path: complex.DataPath = ..., misorientation_rotation: List[float] = ..., output_file: os.PathLike = ..., phase_of_interest: int = ...) -> complex.IFilter.ExecuteResult: ...

class ExportGBCDTriangleDataFilter(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, feature_euler_angles_array_path: complex.DataPath = ..., output_file: os.PathLike = ..., surface_mesh_face_areas_array_path: complex.DataPath = ..., surface_mesh_face_labels_array_path: complex.DataPath = ..., surface_mesh_face_normals_array_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class FindAvgCAxesFilter(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, avg_c_axes_array_path: str = ..., cell_feature_attribute_matrix: complex.DataPath = ..., cell_phases_array_path: complex.DataPath = ..., crystal_structures_array_path: complex.DataPath = ..., feature_ids_array_path: complex.DataPath = ..., quats_array_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class FindAvgOrientationsFilter(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, avg_euler_angles_array_path: str = ..., avg_quats_array_path: str = ..., cell_feature_attribute_matrix: complex.DataPath = ..., cell_feature_ids_array_path: complex.DataPath = ..., cell_phases_array_path: complex.DataPath = ..., cell_quats_array_path: complex.DataPath = ..., crystal_structures_array_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class FindBoundaryStrengthsFilter(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, avg_quats_array_path: complex.DataPath = ..., crystal_structures_array_path: complex.DataPath = ..., feature_phases_array_path: complex.DataPath = ..., loading: List[float] = ..., surface_mesh_f1s_array_name: str = ..., surface_mesh_f1spts_array_name: str = ..., surface_mesh_f7s_array_name: str = ..., surface_mesh_face_labels_array_path: complex.DataPath = ..., surface_meshm_primes_array_name: str = ...) -> complex.IFilter.ExecuteResult: ...

class FindCAxisLocationsFilter(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, c_axis_locations_array_name: str = ..., cell_phases_array_path: complex.DataPath = ..., crystal_structures_array_path: complex.DataPath = ..., quats_array_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class FindFeatureNeighborCAxisMisalignmentsFilter(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, avg_c_axis_misalignments_array_name: str = ..., avg_quats_array_path: complex.DataPath = ..., c_axis_misalignment_list_array_name: str = ..., crystal_structures_array_path: complex.DataPath = ..., feature_phases_array_path: complex.DataPath = ..., find_avg_misals: bool = ..., neighbor_list_array_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class FindFeatureReferenceCAxisMisorientationsFilter(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, avg_c_axes_array_path: complex.DataPath = ..., cell_phases_array_path: complex.DataPath = ..., crystal_structures_array_path: complex.DataPath = ..., feature_avg_c_axis_misorientations_array_name: str = ..., feature_ids_array_path: complex.DataPath = ..., feature_reference_c_axis_misorientations_array_name: str = ..., feature_stdev_c_axis_misorientations_array_name: str = ..., image_geometry_path: complex.DataPath = ..., quats_array_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class FindFeatureReferenceMisorientationsFilter(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, avg_quats_array_path: complex.DataPath = ..., cell_feature_attribute_matrix_path: complex.DataPath = ..., cell_phases_array_path: complex.DataPath = ..., crystal_structures_array_path: complex.DataPath = ..., feature_avg_misorientations_array_name: str = ..., feature_ids_path: complex.DataPath = ..., feature_reference_misorientations_array_name: str = ..., g_beuclidean_distances_array_path: complex.DataPath = ..., quats_array_path: complex.DataPath = ..., reference_orientation: int = ...) -> complex.IFilter.ExecuteResult: ...

class FindGBCDFilter(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, crystal_structures_array_path: complex.DataPath = ..., face_ensemble_attribute_matrix_name: str = ..., feature_euler_angles_array_path: complex.DataPath = ..., feature_phases_array_path: complex.DataPath = ..., gbcd_array_name: str = ..., gbcd_resolution: float = ..., surface_mesh_face_areas_array_path: complex.DataPath = ..., surface_mesh_face_labels_array_path: complex.DataPath = ..., surface_mesh_face_normals_array_path: complex.DataPath = ..., triangle_geometry: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class FindGBCDMetricBasedFilter(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, chosen_limit_dists: int = ..., crystal_structures_array_path: complex.DataPath = ..., dist_output_file: os.PathLike = ..., err_output_file: os.PathLike = ..., exclude_triple_lines: bool = ..., feature_euler_angles_array_path: complex.DataPath = ..., feature_phases_array_path: complex.DataPath = ..., misorientation_rotation: List[float] = ..., node_types_array_path: complex.DataPath = ..., num_sampl_pts: int = ..., phase_of_interest: int = ..., save_relative_err: bool = ..., surface_mesh_face_areas_array_path: complex.DataPath = ..., surface_mesh_face_labels_array_path: complex.DataPath = ..., surface_mesh_face_normals_array_path: complex.DataPath = ..., surface_mesh_feature_face_labels_array_path: complex.DataPath = ..., triangle_geometry_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class FindGBPDMetricBasedFilter(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, crystal_structures_array_path: complex.DataPath = ..., dist_output_file: os.PathLike = ..., err_output_file: os.PathLike = ..., exclude_triple_lines: bool = ..., feature_euler_angles_array_path: complex.DataPath = ..., feature_phases_array_path: complex.DataPath = ..., limit_dist: float = ..., node_types_array_path: complex.DataPath = ..., num_sampl_pts: int = ..., phase_of_interest: int = ..., save_relative_err: bool = ..., surface_mesh_face_areas_array_path: complex.DataPath = ..., surface_mesh_face_labels_array_path: complex.DataPath = ..., surface_mesh_face_normals_array_path: complex.DataPath = ..., surface_mesh_feature_face_labels_array_path: complex.DataPath = ..., triangle_geometry_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class FindKernelAvgMisorientationsFilter(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, cell_phases_array_path: complex.DataPath = ..., crystal_structures_array_path: complex.DataPath = ..., feature_ids_path: complex.DataPath = ..., kernel_average_misorientations_array_name: str = ..., kernel_size: List[int] = ..., quats_array_path: complex.DataPath = ..., selected_image_geometry_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class FindMisorientationsFilter(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, avg_misorientations_array_name: str = ..., avg_quats_array_path: complex.DataPath = ..., crystal_structures_array_path: complex.DataPath = ..., feature_phases_array_path: complex.DataPath = ..., find_avg_misors: bool = ..., misorientation_list_array_name: str = ..., neighbor_list_array_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class FindSchmidsFilter(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, avg_quats_array_path: complex.DataPath = ..., crystal_structures_array_path: complex.DataPath = ..., feature_phases_array_path: complex.DataPath = ..., lambdas_array_name: str = ..., loading_direction: List[float] = ..., override_system: bool = ..., phis_array_name: str = ..., poles_array_name: str = ..., schmids_array_name: str = ..., slip_direction: List[float] = ..., slip_plane: List[float] = ..., slip_systems_array_name: str = ..., store_angle_components: bool = ...) -> complex.IFilter.ExecuteResult: ...

class FindShapesFilter(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, aspect_ratios_array_name: str = ..., axis_euler_angles_array_name: str = ..., axis_lengths_array_name: str = ..., centroids_array_path: complex.DataPath = ..., feature_ids_path: complex.DataPath = ..., omega3s_array_name: str = ..., selected_image_geometry: complex.DataPath = ..., volumes_array_name: str = ...) -> complex.IFilter.ExecuteResult: ...

class FindSlipTransmissionMetricsFilter(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, avg_quats_array_path: complex.DataPath = ..., crystal_structures_array_path: complex.DataPath = ..., f1_list_array_name: str = ..., f1spt_list_array_name: str = ..., f7_list_array_name: str = ..., feature_phases_array_path: complex.DataPath = ..., m_prime_list_array_name: str = ..., neighbor_list_array_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class FindTriangleGeomShapesFilter(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, aspect_ratios_array_name: str = ..., axis_euler_angles_array_name: str = ..., axis_lengths_array_name: str = ..., centroids_array_path: complex.DataPath = ..., face_labels_array_path: complex.DataPath = ..., feature_attribute_matrix_name: complex.DataPath = ..., omega3s_array_name: str = ..., triangle_geometry_path: complex.DataPath = ..., volumes_array_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class GenerateFZQuaternions(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, cell_phases_array_path: complex.DataPath = ..., crystal_structures_array_path: complex.DataPath = ..., f_zquats_array_path: str = ..., good_voxels_array_path: complex.DataPath = ..., quats_array_path: complex.DataPath = ..., use_good_voxels: bool = ...) -> complex.IFilter.ExecuteResult: ...

class GenerateFaceIPFColoringFilter(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, crystal_structures_array_path: complex.DataPath = ..., feature_euler_angles_array_path: complex.DataPath = ..., feature_phases_array_path: complex.DataPath = ..., surface_mesh_face_ipf_colors_array_name: str = ..., surface_mesh_face_labels_array_path: complex.DataPath = ..., surface_mesh_face_normals_array_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class GenerateFaceMisorientationColoringFilter(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, avg_quats_array_path: complex.DataPath = ..., crystal_structures_array_path: complex.DataPath = ..., feature_phases_array_path: complex.DataPath = ..., surface_mesh_face_labels_array_path: complex.DataPath = ..., surface_mesh_face_misorientation_colors_array_name: str = ...) -> complex.IFilter.ExecuteResult: ...

class GenerateGBCDPoleFigureFilter(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, cell_attribute_matrix_name: str = ..., cell_intensity_array_name: str = ..., crystal_structures_array_path: complex.DataPath = ..., gbcd_array_path: complex.DataPath = ..., image_geometry_name: complex.DataPath = ..., misorientation_rotation: List[float] = ..., output_image_dimension: int = ..., phase_of_interest: int = ...) -> complex.IFilter.ExecuteResult: ...

class GenerateIPFColorsFilter(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, cell_euler_angles_array_path: complex.DataPath = ..., cell_ipf_colors_array_name: str = ..., cell_phases_array_path: complex.DataPath = ..., crystal_structures_array_path: complex.DataPath = ..., good_voxels_array_path: complex.DataPath = ..., reference_dir: List[float] = ..., use_good_voxels: bool = ...) -> complex.IFilter.ExecuteResult: ...

class GenerateQuaternionConjugateFilter(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, delete_original_data: bool = ..., output_data_array_path: str = ..., quaternion_data_array_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class H5EbsdReaderParameter(complex.IParameter):
    class ValueType:
        end_slice: int
        euler_representation: int
        hdf5_data_paths: List[str]
        input_file_path: str
        start_slice: int
        use_recommended_transform: bool
        def __init__(self) -> None: ...
    def __init__(self, name: str, human_name: str, help_text: str, default_value: H5EbsdReaderParameter.ValueType) -> None: ...

class ImportH5EspritDataFilter(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, cell_attribute_matrix_name: str = ..., cell_ensemble_attribute_matrix_name: str = ..., degrees_to_radians: bool = ..., image_geometry_name: complex.DataPath = ..., origin: List[float] = ..., read_pattern_data: bool = ..., selected_scan_names: OEMEbsdScanSelectionParameter.ValueType = ..., z_spacing: float = ...) -> complex.IFilter.ExecuteResult: ...

class ImportH5OimDataFilter(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, cell_attribute_matrix_name: str = ..., cell_ensemble_attribute_matrix_name: str = ..., image_geometry_name: complex.DataPath = ..., origin: List[float] = ..., read_pattern_data: bool = ..., selected_scan_names: OEMEbsdScanSelectionParameter.ValueType = ..., z_spacing: float = ...) -> complex.IFilter.ExecuteResult: ...

class MergeTwinsFilter(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, active_array_name: str = ..., angle_tolerance: float = ..., avg_quats_array_path: complex.DataPath = ..., axis_tolerance: float = ..., cell_parent_ids_array_name: str = ..., contiguous_neighbor_list_array_path: complex.DataPath = ..., crystal_structures_array_path: complex.DataPath = ..., feature_ids_path: complex.DataPath = ..., feature_parent_ids_array_name: str = ..., feature_phases_array_path: complex.DataPath = ..., new_cell_feature_attribute_matrix_name: str = ..., non_contiguous_neighbor_list_array_path: complex.DataPath = ..., use_non_contiguous_neighbors: bool = ...) -> complex.IFilter.ExecuteResult: ...

class NeighborOrientationCorrelationFilter(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, cell_phases_array_path: complex.DataPath = ..., confidence_index_array_path: complex.DataPath = ..., crystal_structures_array_path: complex.DataPath = ..., ignored_data_array_paths: List[complex.DataPath] = ..., image_geometry_path: complex.DataPath = ..., level: int = ..., min_confidence: float = ..., misorientation_tolerance: float = ..., quats_array_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class OEMEbsdScanSelectionParameter(complex.IParameter):
    class EbsdReaderType:
        __members__: ClassVar[dict] = ...  # read-only
        Esprit: ClassVar[OEMEbsdScanSelectionParameter.EbsdReaderType] = ...
        Oim: ClassVar[OEMEbsdScanSelectionParameter.EbsdReaderType] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __getstate__(self) -> int: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        def __setstate__(self, state: int) -> None: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...

    class ManufacturerType:
        __members__: ClassVar[dict] = ...  # read-only
        Bruker: ClassVar[OEMEbsdScanSelectionParameter.ManufacturerType] = ...
        DREAM3D: ClassVar[OEMEbsdScanSelectionParameter.ManufacturerType] = ...
        EDAX: ClassVar[OEMEbsdScanSelectionParameter.ManufacturerType] = ...
        HEDM: ClassVar[OEMEbsdScanSelectionParameter.ManufacturerType] = ...
        Oxford: ClassVar[OEMEbsdScanSelectionParameter.ManufacturerType] = ...
        Phillips: ClassVar[OEMEbsdScanSelectionParameter.ManufacturerType] = ...
        ThermoFisher: ClassVar[OEMEbsdScanSelectionParameter.ManufacturerType] = ...
        Unknown: ClassVar[OEMEbsdScanSelectionParameter.ManufacturerType] = ...
        Zeiss: ClassVar[OEMEbsdScanSelectionParameter.ManufacturerType] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __getstate__(self) -> int: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        def __setstate__(self, state: int) -> None: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...

    class ValueType:
        input_file_path: os.PathLike
        scan_names: List[str]
        stacking_order: int
        def __init__(self) -> None: ...
    def __init__(self, name: str, human_name: str, help_text: str, default_value: OEMEbsdScanSelectionParameter.ValueType, allowed_manufacturers: Set[OEMEbsdScanSelectionParameter.ManufacturerType], reader_type: OEMEbsdScanSelectionParameter.EbsdReaderType, extensions_type: Set[str]) -> None: ...

class ReadAngDataFilter(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, cell_attribute_matrix_name: str = ..., cell_ensemble_attribute_matrix_name: str = ..., data_container_name: complex.DataPath = ..., input_file: os.PathLike = ...) -> complex.IFilter.ExecuteResult: ...

class ReadCtfDataFilter(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, cell_attribute_matrix_name: str = ..., cell_ensemble_attribute_matrix_name: str = ..., data_container_name: complex.DataPath = ..., degrees_to_radians: bool = ..., edax_hexagonal_alignment: bool = ..., input_file: os.PathLike = ...) -> complex.IFilter.ExecuteResult: ...

class ReadH5EbsdFilter(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, cell_attribute_matrix_name: str = ..., cell_ensemble_attribute_matrix_name: str = ..., data_container_name: complex.DataPath = ..., read_h5_ebsd_filter: H5EbsdReaderParameter.ValueType = ...) -> complex.IFilter.ExecuteResult: ...

class RodriguesConvertorFilter(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, delete_original_data: bool = ..., output_data_array_path: str = ..., rodrigues_data_array_path: complex.DataPath = ...) -> complex.IFilter.ExecuteResult: ...

class RotateEulerRefFrameFilter(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, cell_euler_angles_array_path: complex.DataPath = ..., rotation_axis: List[float] = ...) -> complex.IFilter.ExecuteResult: ...

class WritePoleFigureFilter(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, cell_euler_angles_array_path: complex.DataPath = ..., cell_phases_array_path: complex.DataPath = ..., crystal_structures_array_path: complex.DataPath = ..., generation_algorithm: int = ..., good_voxels_array_path: complex.DataPath = ..., image_geometry_path: complex.DataPath = ..., image_layout: int = ..., image_prefix: str = ..., image_size: int = ..., lambert_size: int = ..., material_name_array_path: complex.DataPath = ..., num_colors: int = ..., output_path: os.PathLike = ..., save_as_image_geometry: bool = ..., title: str = ..., use_good_voxels: bool = ..., write_image_to_disk: bool = ...) -> complex.IFilter.ExecuteResult: ...

class WriteStatsGenOdfAngleFileFilter(complex.IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: complex.DataStructure, cell_euler_angles_array_path: complex.DataPath = ..., cell_phases_array_path: complex.DataPath = ..., convert_to_degrees: bool = ..., delimiter: int = ..., good_voxels_array_path: complex.DataPath = ..., output_file: os.PathLike = ..., sigma: int = ..., use_good_voxels: bool = ..., weight: float = ...) -> complex.IFilter.ExecuteResult: ...
