from typing import Any, Callable, ClassVar, Iterator, List, Optional, Set, Tuple

from typing import overload
import numpy
import os

class AbaqusHexahedronWriterFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, feature_ids_array_path: DataPath = ..., file_prefix: str = ..., hourglass_stiffness: int = ..., image_geometry_path: DataPath = ..., job_name: str = ..., output_path: os.PathLike = ...) -> IFilter.ExecuteResult: ...

class AbstractPipelineNode:
    def __init__(self, *args, **kwargs) -> None: ...

class AbstractPlugin:
    def __init__(self, *args, **kwargs) -> None: ...

class AddBadDataFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, boundary_noise: bool = ..., boundary_vol_fraction: float = ..., gb_euclidean_distances_array_path: DataPath = ..., image_geometry_path: DataPath = ..., poisson_noise: bool = ..., poisson_vol_fraction: float = ..., seed_value: int = ..., use_seed: bool = ...) -> IFilter.ExecuteResult: ...

class AlignGeometries(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, alignment_type: int = ..., moving_geometry: DataPath = ..., target_geometry: DataPath = ...) -> IFilter.ExecuteResult: ...

class AlignSectionsFeatureCentroidFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, alignment_shift_file_name: os.PathLike = ..., good_voxels_array_path: DataPath = ..., reference_slice: int = ..., selected_cell_data_path: DataPath = ..., selected_image_geometry_path: DataPath = ..., use_reference_slice: bool = ..., write_alignment_shifts: bool = ...) -> IFilter.ExecuteResult: ...

class AlignSectionsListFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, dream3d_alignment_file: bool = ..., input_file: os.PathLike = ..., selected_image_geometry: DataPath = ...) -> IFilter.ExecuteResult: ...

class AppendImageGeometryZSliceFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, check_resolution: bool = ..., destination_geometry: DataPath = ..., input_geometry: DataPath = ..., new_geometry: DataPath = ..., save_as_new_geometry: bool = ...) -> IFilter.ExecuteResult: ...

class ApplyTransformationToGeometryFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, cell_attribute_matrix_path: DataPath = ..., computed_transformation_matrix: DataPath = ..., interpolation_type: int = ..., manual_transformation_matrix: List[List[float]] = ..., rotation: List[float] = ..., scale: List[float] = ..., selected_image_geometry: DataPath = ..., transformation_type: int = ..., translate_geometry_to_global_origin: bool = ..., translation: List[float] = ...) -> IFilter.ExecuteResult: ...

class ApproximatePointCloudHull(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, grid_resolution: List[float] = ..., hull_vertex_geometry: DataPath = ..., min_empty_neighbors: int = ..., vertex_geometry: DataPath = ...) -> IFilter.ExecuteResult: ...

class ArrayCalculatorFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, calculated_array: DataPath = ..., infix_equation: CalculatorParameter.ValueType = ..., scalar_type: NumericType = ...) -> IFilter.ExecuteResult: ...

class ArrayCreationParameter(IParameter):
    def __init__(self, name: str, human_name: str, help_text: str, default_value: DataPath) -> None: ...

class ArraySelectionParameter(IParameter):
    class DataLocation:
        __members__: ClassVar[dict] = ...  # read-only
        Any: ClassVar[ArraySelectionParameter.DataLocation] = ...
        InMemory: ClassVar[ArraySelectionParameter.DataLocation] = ...
        OutOfCore: ClassVar[ArraySelectionParameter.DataLocation] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __getstate__(self) -> int: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        def __setstate__(self, state: int) -> None: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...
    def __init__(self, name: str, human_name: str, help_text: str, default_value: DataPath, allowed_types: Set[DataType], required_comps: List[List[int]] = ..., location: ArraySelectionParameter.DataLocation = ...) -> None: ...

class ArrayThreshold(IArrayThreshold):
    class ComparisonType:
        __members__: ClassVar[dict] = ...  # read-only
        Equal: ClassVar[ArrayThreshold.ComparisonType] = ...
        GreaterThan: ClassVar[ArrayThreshold.ComparisonType] = ...
        LessThan: ClassVar[ArrayThreshold.ComparisonType] = ...
        NotEqual: ClassVar[ArrayThreshold.ComparisonType] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __getstate__(self) -> int: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        def __setstate__(self, state: int) -> None: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...
    array_path: DataPath
    comparison: ArrayThreshold.ComparisonType
    value: float
    def __init__(self) -> None: ...

class ArrayThresholdSet(IArrayThreshold):
    thresholds: List[IArrayThreshold]
    def __init__(self) -> None: ...

class ArrayThresholdsParameter(IParameter):
    def __init__(self, name: str, human_name: str, help_text: str, default_value: ArrayThresholdSet, required_comps: List[List[int]] = ...) -> None: ...

class AtomicBoolProxy:
    def __init__(self, *args, **kwargs) -> None: ...
    def __bool__(self) -> bool: ...

class AttributeMatrix(BaseGroup):
    def __init__(self, *args, **kwargs) -> None: ...

class AttributeMatrixSelectionParameter(IParameter):
    def __init__(self, name: str, human_name: str, help_text: str, default_value: DataPath) -> None: ...

class AvizoRectilinearCoordinateWriterFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, feature_ids_array_path: DataPath = ..., geometry_path: DataPath = ..., output_file: os.PathLike = ..., units: str = ..., write_binary_file: bool = ...) -> IFilter.ExecuteResult: ...

class AvizoUniformCoordinateWriterFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, feature_ids_array_path: DataPath = ..., geometry_path: DataPath = ..., output_file: os.PathLike = ..., units: str = ..., write_binary_file: bool = ...) -> IFilter.ExecuteResult: ...

class BaseGroup(DataObject):
    class GroupType:
        __members__: ClassVar[dict] = ...  # read-only
        AttributeMatrix: ClassVar[BaseGroup.GroupType] = ...
        BaseGroup: ClassVar[BaseGroup.GroupType] = ...
        DataGroup: ClassVar[BaseGroup.GroupType] = ...
        EdgeGeom: ClassVar[BaseGroup.GroupType] = ...
        HexahedralGeom: ClassVar[BaseGroup.GroupType] = ...
        IGeometry: ClassVar[BaseGroup.GroupType] = ...
        IGridGeometry: ClassVar[BaseGroup.GroupType] = ...
        INodeGeometry0D: ClassVar[BaseGroup.GroupType] = ...
        INodeGeometry1D: ClassVar[BaseGroup.GroupType] = ...
        INodeGeometry2D: ClassVar[BaseGroup.GroupType] = ...
        INodeGeometry3D: ClassVar[BaseGroup.GroupType] = ...
        ImageGeom: ClassVar[BaseGroup.GroupType] = ...
        QuadGeom: ClassVar[BaseGroup.GroupType] = ...
        RectGridGeom: ClassVar[BaseGroup.GroupType] = ...
        TetrahedralGeom: ClassVar[BaseGroup.GroupType] = ...
        TriangleGeom: ClassVar[BaseGroup.GroupType] = ...
        Unknown: ClassVar[BaseGroup.GroupType] = ...
        VertexGeom: ClassVar[BaseGroup.GroupType] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __getstate__(self) -> int: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        def __setstate__(self, state: int) -> None: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def contains(self, arg0: str) -> bool: ...
    def __getitem__(self, arg0: str) -> DataObject: ...
    def __len__(self) -> int: ...

class BoolAbstractDataStore(IDataStore):
    def __init__(self, *args, **kwargs) -> None: ...

class BoolArray(IDataArray):
    dtype: ClassVar[dtype] = ...  # read-only
    def __init__(self, *args, **kwargs) -> None: ...

class BoolDataStore(BoolAbstractDataStore):
    dtype: ClassVar[dtype] = ...  # read-only
    def __init__(self, tuple_shape: List[int], component_shape: List[int], init_value: Optional[bool] = ...) -> None: ...
    def npview(self) -> numpy.ndarray[bool]: ...
    def __getitem__(self, arg0: int) -> bool: ...
    def __len__(self) -> int: ...

class BoolParameter(IParameter):
    def __init__(self, name: str, human_name: str, help_text: str, default_value: bool) -> None: ...

class CSVWizardData:
    class HeaderMode:
        __members__: ClassVar[dict] = ...  # read-only
        Custom: ClassVar[CSVWizardData.HeaderMode] = ...
        Defaults: ClassVar[CSVWizardData.HeaderMode] = ...
        Line: ClassVar[CSVWizardData.HeaderMode] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __getstate__(self) -> int: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        def __setstate__(self, state: int) -> None: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...
    begin_index: int
    comma_as_delimiter: bool
    consecutive_delimiters: bool
    data_headers: List[str]
    data_types: List[Optional[DataType]]
    delimiters: List[str]
    header_line: int
    header_mode: CSVWizardData.HeaderMode
    input_file_path: str
    number_of_lines: int
    semicolon_as_delimiter: bool
    space_as_delimiter: bool
    tab_as_delimiter: bool
    def __init__(self) -> None: ...

class CalculateArrayHistogramFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, data_group_name: DataPath = ..., histogram_suffix: str = ..., max_range: float = ..., min_range: float = ..., new_data_group: bool = ..., new_data_group_name: DataPath = ..., number_of_bins: int = ..., selected_array_paths: List[DataPath] = ..., user_defined_range: bool = ...) -> IFilter.ExecuteResult: ...

class CalculateFeatureSizesFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, equivalent_diameters_path: str = ..., feature_attribute_matrix: DataPath = ..., feature_ids_path: DataPath = ..., geometry_path: DataPath = ..., num_elements_path: str = ..., save_element_sizes: bool = ..., volumes_path: str = ...) -> IFilter.ExecuteResult: ...

class CalculateTriangleAreasFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, triangle_areas_array_path: str = ..., triangle_geometry_data_path: DataPath = ...) -> IFilter.ExecuteResult: ...

class CalculatorParameter(IParameter):
    class AngleUnits:
        __members__: ClassVar[dict] = ...  # read-only
        Degrees: ClassVar[CalculatorParameter.AngleUnits] = ...
        Radians: ClassVar[CalculatorParameter.AngleUnits] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __getstate__(self) -> int: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        def __setstate__(self, state: int) -> None: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...

    class ValueType:
        equation: str
        selected_group: DataPath
        units: CalculatorParameter.AngleUnits
        def __init__(self, arg0: DataPath, arg1: str, arg2: CalculatorParameter.AngleUnits) -> None: ...
    def __init__(self, name: str, human_name: str, help_text: str, default_value: CalculatorParameter.ValueType) -> None: ...

class ChangeAngleRepresentation(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, angles_array_path: DataPath = ..., conversion_type: int = ...) -> IFilter.ExecuteResult: ...

class ChoicesParameter(IParameter):
    def __init__(self, arg0: str, arg1: str, arg2: str, arg3: int, arg4: List[str]) -> None: ...

class CombineAttributeArraysFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, move_values: bool = ..., normalize_data: bool = ..., selected_data_array_paths: List[DataPath] = ..., stacked_data_array_name: str = ...) -> IFilter.ExecuteResult: ...

class CombineStlFilesFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, face_attribute_matrix_name: str = ..., face_normals_array_name: str = ..., stl_files_path: os.PathLike = ..., triangle_data_container_name: DataPath = ..., vertex_attribute_matrix_name: str = ...) -> IFilter.ExecuteResult: ...

class ComputeFeatureRectFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, feature_data_attribute_matrix_path: DataPath = ..., feature_ids_array_path: DataPath = ..., feature_rect_array_path: str = ...) -> IFilter.ExecuteResult: ...

class ComputeMomentInvariants2DFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, central_moments_array_path: str = ..., feature_attribute_matrix_path: DataPath = ..., feature_ids_array_path: DataPath = ..., feature_rect_array_path: DataPath = ..., image_geometry_path: DataPath = ..., normalize_moment_invariants: bool = ..., omega1_array_path: str = ..., omega2_array_path: str = ..., save_central_moments: bool = ...) -> IFilter.ExecuteResult: ...

class ConditionalSetValue(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, conditional_array_path: DataPath = ..., invert_mask: bool = ..., remove_value: str = ..., replace_value: str = ..., selected_array_path: DataPath = ..., use_conditional: bool = ...) -> IFilter.ExecuteResult: ...

class ConvertColorToGrayScaleFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, color_channel: int = ..., color_weights: List[float] = ..., conversion_algorithm: int = ..., input_data_array_vector: List[DataPath] = ..., output_array_prefix: str = ...) -> IFilter.ExecuteResult: ...

class ConvertDataFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, array_to_convert: DataPath = ..., converted_array: str = ..., scalar_type: int = ...) -> IFilter.ExecuteResult: ...

class CopyArrayInstanceAction(IDataCreationAction):
    def __init__(self, selected_data_path: DataPath, created_data_path: DataPath) -> None: ...

class CopyDataObjectAction(IDataCreationAction):
    def __init__(self, path: DataPath, new_path: DataPath, all_created_paths: List[DataPath]) -> None: ...

class CopyDataObjectFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, existing_data_path: List[DataPath] = ..., new_data_path: DataPath = ..., new_path_suffix: str = ..., use_new_parent: bool = ...) -> IFilter.ExecuteResult: ...

class CopyFeatureArrayToElementArray(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, created_array_suffix: str = ..., feature_ids_path: DataPath = ..., selected_feature_array_path: List[DataPath] = ...) -> IFilter.ExecuteResult: ...

class CreateArrayAction(IDataCreationAction):
    def __init__(self, type: DataType, t_dims: List[int], c_dims: List[int], path: DataPath, data_format: str = ...) -> None: ...

class CreateAttributeMatrixAction(IDataCreationAction):
    def __init__(self, path: DataPath, shape: List[int]) -> None: ...

class CreateAttributeMatrixFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, Data_Object_Path: DataPath = ..., tuple_dimensions: List[List[float]] = ...) -> IFilter.ExecuteResult: ...

class CreateDataArray(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, advanced_options: bool = ..., component_count: int = ..., data_format: str = ..., initialization_value: str = ..., numeric_type: NumericType = ..., output_data_array: DataPath = ..., tuple_dimensions: List[List[float]] = ...) -> IFilter.ExecuteResult: ...

class CreateDataGroup(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, Data_Object_Path: DataPath = ...) -> IFilter.ExecuteResult: ...

class CreateDataGroupAction(IDataCreationAction):
    def __init__(self, path: DataPath) -> None: ...

class CreateEdgeGeometryAction(IDataCreationAction):
    @overload
    def __init__(self, geometry_path: DataPath, num_edges: int, num_vertices: int, vertex_attribute_matrix_name: str, edge_attribute_matrix_name: str, shared_vertices_name: str, shared_edges_name: str) -> None: ...
    @overload
    def __init__(self, geometry_path: DataPath, input_vertices_array_path: DataPath, input_edges_array_path: DataPath, vertex_attribute_matrix_name: str, edge_attribute_matrix_name: str, array_type: IDataCreationAction.ArrayHandlingType) -> None: ...

class CreateFeatureArrayFromElementArray(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, cell_feature_attribute_matrix_path: DataPath = ..., created_array_name: str = ..., feature_ids_path: DataPath = ..., selected_cell_array_path: DataPath = ...) -> IFilter.ExecuteResult: ...

class CreateGeometryFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, array_handling: int = ..., cell_attribute_matrix_name: str = ..., dimensions: List[int] = ..., edge_attribute_matrix_name: str = ..., edge_list_name: DataPath = ..., face_attribute_matrix_name: str = ..., geometry_name: DataPath = ..., geometry_type: int = ..., hexahedral_list_name: DataPath = ..., length_unit_type: int = ..., origin: List[float] = ..., quadrilateral_list_name: DataPath = ..., spacing: List[float] = ..., tetrahedral_list_name: DataPath = ..., triangle_list_name: DataPath = ..., vertex_attribute_matrix_name: str = ..., vertex_list_name: DataPath = ..., warnings_as_errors: bool = ..., x_bounds: DataPath = ..., y_bounds: DataPath = ..., z_bounds: DataPath = ...) -> IFilter.ExecuteResult: ...

class CreateHexahedralGeometryAction(IDataCreationAction):
    @overload
    def __init__(self, geometry_path: DataPath, num_cells: int, num_vertices: int, vertex_data_name: str, cell_data_name: str, shared_vertices_name: str, shared_cells_name: str) -> None: ...
    @overload
    def __init__(self, geometry_path: DataPath, input_vertices_array_path: DataPath, input_cell_array_path: DataPath, vertex_attribute_matrix_name: str, cell_attribute_matrix_name: str, array_type: IDataCreationAction.ArrayHandlingType) -> None: ...

class CreateImageGeometry(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, cell_data_name: str = ..., dimensions: List[int] = ..., geometry_data_path: DataPath = ..., origin: List[float] = ..., spacing: List[float] = ...) -> IFilter.ExecuteResult: ...

class CreateImageGeometryAction(IDataCreationAction):
    def __init__(self, path: DataPath, dims: List[int], origin: List[float], spacing: List[float], cell_attribute_matrix_name: str) -> None: ...

class CreateNeighborListAction(IDataCreationAction):
    def __init__(self, type: DataType, tuple_count: int, path: DataPath) -> None: ...

class CreateQuadGeometryAction(IDataCreationAction):
    @overload
    def __init__(self, geometry_path: DataPath, num_faces: int, num_vertices: int, vertex_attribute_matrix_name: str, face_attribute_matrix_name: str, shared_vertices_name: str, shared_faces_name: str) -> None: ...
    @overload
    def __init__(self, geometry_path: DataPath, input_vertices_array_path: DataPath, input_faces_array_path: DataPath, vertex_attribute_matrix_name: str, face_attribute_matrix_name: str, array_type: IDataCreationAction.ArrayHandlingType) -> None: ...

class CreateRectGridGeometryAction(IDataCreationAction):
    @overload
    def __init__(self, path: DataPath, x_bounds_dim: int, y_bounds_dim: int, z_bounds_dim: int, cell_attribute_matrix_name: str, x_bounds_name: str, y_bounds_name: str, z_bounds_name: str) -> None: ...
    @overload
    def __init__(self, path: DataPath, input_x_bounds_path: DataPath, input_y_bounds_path: DataPath, input_z_bounds_path: DataPath, cell_attribute_matrix_name: str, array_type: IDataCreationAction.ArrayHandlingType) -> None: ...

class CreateStringArrayAction(IDataCreationAction):
    def __init__(self, t_dims: List[int], path: DataPath, initialize_value: str = ...) -> None: ...

class CreateTetrahedralGeometryAction(IDataCreationAction):
    @overload
    def __init__(self, geometry_path: DataPath, num_cells: int, num_vertices: int, vertex_data_name: str, cell_data_name: str, shared_vertices_name: str, shared_cells_name: str) -> None: ...
    @overload
    def __init__(self, geometry_path: DataPath, input_vertices_array_path: DataPath, input_cell_array_path: DataPath, vertex_attribute_matrix_name: str, cell_attribute_matrix_name: str, array_type: IDataCreationAction.ArrayHandlingType) -> None: ...

class CreateTriangleGeometryAction(IDataCreationAction):
    @overload
    def __init__(self, geometry_path: DataPath, num_faces: int, num_vertices: int, vertex_attribute_matrix_name: str, face_attribute_matrix_name: str, shared_vertices_name: str, shared_faces_name: str) -> None: ...
    @overload
    def __init__(self, geometry_path: DataPath, input_vertices_array_path: DataPath, input_faces_array_path: DataPath, vertex_attribute_matrix_name: str, face_attribute_matrix_name: str, array_type: IDataCreationAction.ArrayHandlingType) -> None: ...

class CreateVertexGeometryAction(IDataCreationAction):
    @overload
    def __init__(self, geometry_path: DataPath, num_vertices: int, vertex_attribute_matrix_name: str, shared_vertex_list_name: str) -> None: ...
    @overload
    def __init__(self, geometry_path: DataPath, input_vertices_array_path: DataPath, vertex_attribute_matrix_name: str, array_type: IDataCreationAction.ArrayHandlingType) -> None: ...

class CropImageGeometry(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, cell_feature_attribute_matrix: DataPath = ..., created_image_geometry: DataPath = ..., feature_ids: DataPath = ..., max_voxel: List[int] = ..., min_voxel: List[int] = ..., remove_original_geometry: bool = ..., renumber_features: bool = ..., selected_image_geometry: DataPath = ..., update_origin: bool = ...) -> IFilter.ExecuteResult: ...

class CropVertexGeometry(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, cropped_geom: DataPath = ..., max_pos: List[float] = ..., min_pos: List[float] = ..., target_arrays: List[DataPath] = ..., vertex_data_name: str = ..., vertex_geom: DataPath = ...) -> IFilter.ExecuteResult: ...

class DataGroup(BaseGroup):
    def __init__(self, *args, **kwargs) -> None: ...

class DataGroupCreationParameter(IParameter):
    def __init__(self, name: str, human_name: str, help_text: str, default_value: DataPath) -> None: ...

class DataGroupSelectionParameter(IParameter):
    def __init__(self, name: str, human_name: str, help_text: str, default_value: DataPath, allowed_types: Set[BaseGroup.GroupType]) -> None: ...

class DataObject:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def id(self) -> int: ...
    @property
    def name(self) -> str: ...

class DataObjectNameParameter(IParameter):
    def __init__(self, name: str, human_name: str, help_text: str, default_value: str) -> None: ...

class DataPath:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: List[str]) -> None: ...
    def __getitem__(self, arg0: int) -> str: ...

class DataPathSelectionParameter(IParameter):
    def __init__(self, name: str, human_name: str, help_text: str, default_value: DataPath) -> None: ...

class DataStoreFormatParameter(IParameter):
    def __init__(self, name: str, human_name: str, help_text: str, default_value: str) -> None: ...

class DataStructure:
    def __init__(self) -> None: ...
    def remove(self, arg0: DataPath) -> bool: ...
    def __getitem__(self, arg0: DataPath) -> DataObject: ...
    def __len__(self) -> int: ...
    @property
    def size(self) -> int: ...

class DataType:
    __members__: ClassVar[dict] = ...  # read-only
    __entries: ClassVar[dict] = ...
    boolean: ClassVar[DataType] = ...
    float32: ClassVar[DataType] = ...
    float64: ClassVar[DataType] = ...
    int16: ClassVar[DataType] = ...
    int32: ClassVar[DataType] = ...
    int64: ClassVar[DataType] = ...
    int8: ClassVar[DataType] = ...
    uint16: ClassVar[DataType] = ...
    uint32: ClassVar[DataType] = ...
    uint64: ClassVar[DataType] = ...
    uint8: ClassVar[DataType] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class DataTypeParameter(IParameter):
    def __init__(self, name: str, human_name: str, help_text: str, default_value: DataType) -> None: ...

class DeleteData(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, removed_data_path: List[DataPath] = ...) -> IFilter.ExecuteResult: ...

class DeleteDataAction(IDataAction):
    class DeleteType:
        __members__: ClassVar[dict] = ...  # read-only
        JustObject: ClassVar[DeleteDataAction.DeleteType] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __getstate__(self) -> int: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        def __setstate__(self, state: int) -> None: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...
    def __init__(self, path: DataPath, type: DeleteDataAction.DeleteType) -> None: ...

class Dream3dImportParameter(IParameter):
    class ImportData:
        data_paths: Optional[List[DataPath]]
        file_path: os.PathLike
        def __init__(self) -> None: ...
    def __init__(self, name: str, human_name: str, help_text: str, default_value: Dream3dImportParameter.ImportData) -> None: ...

class DynamicTableInfo:
    class DynamicVectorInfo:
        @overload
        def __init__(self, min_size: int, default_size: int, header_template: str) -> None: ...
        @overload
        def __init__(self, min_size: int, header_template: str) -> None: ...

    class StaticVectorInfo:
        @overload
        def __init__(self, size: int) -> None: ...
        @overload
        def __init__(self, headers: List[str]) -> None: ...

    class VectorInfo:
        @overload
        def __init__(self, vector_info: DynamicTableInfo.StaticVectorInfo) -> None: ...
        @overload
        def __init__(self, vector_info: DynamicTableInfo.DynamicVectorInfo) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, rows_info: DynamicTableInfo.VectorInfo, cols_info: DynamicTableInfo.VectorInfo) -> None: ...
    def set_cols_info(self, info: DynamicTableInfo.VectorInfo) -> None: ...
    def set_rows_info(self, info: DynamicTableInfo.VectorInfo) -> None: ...

class DynamicTableParameter(IParameter):
    @overload
    def __init__(self, name: str, human_name: str, help_text: str, default_value: List[List[float]], table_info: DynamicTableInfo) -> None: ...
    @overload
    def __init__(self, name: str, human_name: str, help_text: str, table_info: DynamicTableInfo) -> None: ...

class EdgeGeom(INodeGeometry1D):
    def __init__(self, *args, **kwargs) -> None: ...

class EnsembleInfoParameter(IParameter):
    def __init__(self, name: str, human_name: str, help_text: str, default_value: List[List[str[3]]]) -> None: ...

class ErodeDilateBadDataFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, feature_ids_path: DataPath = ..., ignored_data_array_paths: List[DataPath] = ..., num_iterations: int = ..., operation: int = ..., selected_image_geometry: DataPath = ..., x_dir_on: bool = ..., y_dir_on: bool = ..., z_dir_on: bool = ...) -> IFilter.ExecuteResult: ...

class ErodeDilateCoordinationNumberFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, coordination_number: int = ..., feature_ids_path: DataPath = ..., ignored_data_array_paths: List[DataPath] = ..., loop: bool = ..., selected_image_geometry: DataPath = ...) -> IFilter.ExecuteResult: ...

class ErodeDilateMaskFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, mask_array_path: DataPath = ..., num_iterations: int = ..., operation: int = ..., selected_image_geometry: DataPath = ..., x_dir_on: bool = ..., y_dir_on: bool = ..., z_dir_on: bool = ...) -> IFilter.ExecuteResult: ...

class Error:
    code: int
    message: str
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: int, arg1: str) -> None: ...

class ExecuteProcessFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, arguments: str = ..., blocking: bool = ..., output_log_file: os.PathLike = ..., timeout: int = ...) -> IFilter.ExecuteResult: ...

class ExportDREAM3DFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, export_file_path: os.PathLike = ..., write_xdmf_file: bool = ...) -> IFilter.ExecuteResult: ...

class ExtractComponentAsArrayFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, comp_number: int = ..., move_components_to_new_array: bool = ..., new_array_path: str = ..., remove_components_from_array: bool = ..., selected_array_path: DataPath = ...) -> IFilter.ExecuteResult: ...

class ExtractInternalSurfacesFromTriangleGeometry(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, copy_triangle_array_paths: List[DataPath] = ..., copy_vertex_array_paths: List[DataPath] = ..., face_data_name: str = ..., internal_triangle_geom: DataPath = ..., node_types: DataPath = ..., triangle_geom: DataPath = ..., vertex_data_name: str = ...) -> IFilter.ExecuteResult: ...

class ExtractVertexGeometryFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, array_handling: int = ..., included_data_array_paths: List[DataPath] = ..., input_geometry_path: DataPath = ..., mask_array_path: DataPath = ..., shared_vertex_list_name: str = ..., use_mask: bool = ..., vertex_attr_matrix_name: str = ..., vertex_geometry_path: DataPath = ...) -> IFilter.ExecuteResult: ...

class FeatureDataCSVWriterFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, cell_feature_attribute_matrix_path: DataPath = ..., delimiter_choice_int: int = ..., feature_data_file: os.PathLike = ..., write_neighborlist_data: bool = ..., write_num_features_line: bool = ...) -> IFilter.ExecuteResult: ...

class FileSystemPathParameter(IParameter):
    class PathType:
        __members__: ClassVar[dict] = ...  # read-only
        InputDir: ClassVar[FileSystemPathParameter.PathType] = ...
        InputFile: ClassVar[FileSystemPathParameter.PathType] = ...
        OutputDir: ClassVar[FileSystemPathParameter.PathType] = ...
        OutputFile: ClassVar[FileSystemPathParameter.PathType] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __getstate__(self) -> int: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        def __setstate__(self, state: int) -> None: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...
    def __init__(self, name: str, human_name: str, help_text: str, default_value: os.PathLike, extensions_type: Set[str], path_type: FileSystemPathParameter.PathType, accept_all_extensions: bool = ...) -> None: ...

class FillBadDataFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, cell_phases_array_path: DataPath = ..., feature_ids_path: DataPath = ..., ignored_data_array_paths: List[DataPath] = ..., min_allowed_defect_size: int = ..., selected_image_geometry: DataPath = ..., store_as_new_phase: bool = ...) -> IFilter.ExecuteResult: ...

class FindArrayStatisticsFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, compute_by_index: bool = ..., destination_attribute_matrix: DataPath = ..., feature_ids_path: DataPath = ..., find_histogram: bool = ..., find_length: bool = ..., find_max: bool = ..., find_mean: bool = ..., find_median: bool = ..., find_min: bool = ..., find_std_deviation: bool = ..., find_summation: bool = ..., find_unique_values: bool = ..., histogram_array_name: str = ..., length_array_name: str = ..., mask_array_path: DataPath = ..., max_range: float = ..., maximum_array_name: str = ..., mean_array_name: str = ..., median_array_name: str = ..., min_range: float = ..., minimum_array_name: str = ..., num_bins: int = ..., number_unique_values: str = ..., selected_array_path: DataPath = ..., standardize_data: bool = ..., standardized_array_name: str = ..., std_deviation_array_name: str = ..., summation_array_name: str = ..., use_full_range: bool = ..., use_mask: bool = ...) -> IFilter.ExecuteResult: ...

class FindBiasedFeaturesFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, biased_features_array_name: str = ..., calc_by_phase: bool = ..., centroids_array_path: DataPath = ..., image_geometry_path: DataPath = ..., phases_array_path: DataPath = ..., surface_features_array_path: DataPath = ...) -> IFilter.ExecuteResult: ...

class FindBoundaryCellsFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, boundary_cells_array_name: str = ..., feature_ids_array_path: DataPath = ..., ignore_feature_zero: bool = ..., image_geometry_path: DataPath = ..., include_volume_boundary: bool = ...) -> IFilter.ExecuteResult: ...

class FindBoundaryElementFractionsFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, boundary_cell_fractions_array_name: str = ..., boundary_cells_array_path: DataPath = ..., feature_data_attribute_matrix_path: DataPath = ..., feature_ids_array_path: DataPath = ...) -> IFilter.ExecuteResult: ...

class FindDifferencesMap(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, difference_map_array_path: DataPath = ..., first_input_array_path: DataPath = ..., second_input_array_path: DataPath = ...) -> IFilter.ExecuteResult: ...

class FindEuclideanDistMapFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, calc_manhattan_dist: bool = ..., do_boundaries: bool = ..., do_quad_points: bool = ..., do_triple_lines: bool = ..., feature_ids_path: DataPath = ..., g_bdistances_array_name: str = ..., nearest_neighbors_array_name: str = ..., q_pdistances_array_name: str = ..., save_nearest_neighbors: bool = ..., selected_image_geometry: DataPath = ..., t_jdistances_array_name: str = ...) -> IFilter.ExecuteResult: ...

class FindFeatureCentroidsFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, centroids_array_path: str = ..., feature_attribute_matrix: DataPath = ..., feature_ids_path: DataPath = ..., selected_image_geometry: DataPath = ...) -> IFilter.ExecuteResult: ...

class FindFeatureClusteringFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, biased_features_array_path: DataPath = ..., cell_ensemble_attribute_matrix_name: DataPath = ..., centroids_array_path: DataPath = ..., clustering_list_array_name: str = ..., equivalent_diameters_array_path: DataPath = ..., feature_phases_array_path: DataPath = ..., max_min_array_name: str = ..., number_of_bins: int = ..., phase_number: int = ..., rdf_array_name: str = ..., remove_biased_features: bool = ..., seed_value: int = ..., selected_image_geometry: DataPath = ..., set_random_seed: bool = ...) -> IFilter.ExecuteResult: ...

class FindFeaturePhasesBinaryFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, cell_data_attribute_matrix_path: DataPath = ..., feature_ids_array_path: DataPath = ..., feature_phases_array_name: str = ..., good_voxels_array_path: DataPath = ...) -> IFilter.ExecuteResult: ...

class FindFeaturePhasesFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, cell_features_attribute_matrix_path: DataPath = ..., cell_phases_array_path: DataPath = ..., feature_ids_path: DataPath = ..., feature_phases_array_path: str = ...) -> IFilter.ExecuteResult: ...

class FindLargestCrossSectionsFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, cell_feature_attribute_matrix_path: DataPath = ..., feature_ids_array_path: DataPath = ..., image_geometry_path: DataPath = ..., largest_cross_sections_array_path: str = ..., plane: int = ...) -> IFilter.ExecuteResult: ...

class FindNeighborListStatistics(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, find_length: bool = ..., find_maximum: bool = ..., find_mean: bool = ..., find_median: bool = ..., find_minimum: bool = ..., find_standard_deviation: bool = ..., find_summation: bool = ..., input_array: DataPath = ..., length: str = ..., maximum: str = ..., mean: str = ..., median: str = ..., minimum: str = ..., standard_deviation: str = ..., summation: str = ...) -> IFilter.ExecuteResult: ...

class FindNeighborhoodsFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, centroids_array_path: DataPath = ..., equivalent_diameters_array_path: DataPath = ..., feature_phases_array_path: DataPath = ..., multiples_of_average: float = ..., neighborhood_list_array_name: str = ..., neighborhoods_array_name: str = ..., selected_image_geometry_path: DataPath = ...) -> IFilter.ExecuteResult: ...

class FindNeighbors(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, boundary_cells: str = ..., cell_feature_arrays: DataPath = ..., feature_ids: DataPath = ..., image_geometry: DataPath = ..., neighbor_list: str = ..., number_of_neighbors: str = ..., shared_surface_area_list: str = ..., store_boundary_cells: bool = ..., store_surface_features: bool = ..., surface_features: str = ...) -> IFilter.ExecuteResult: ...

class FindNumFeaturesFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, ensemble_attribute_matrix_path: DataPath = ..., feature_phases_array_path: DataPath = ..., num_features_array_path: str = ...) -> IFilter.ExecuteResult: ...

class FindSurfaceAreaToVolumeFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, calculate_sphericity: bool = ..., feature_ids_path: DataPath = ..., num_cells_array_path: DataPath = ..., selected_image_geometry: DataPath = ..., sphericity_array_name: str = ..., surface_area_volume_ratio_array_name: str = ...) -> IFilter.ExecuteResult: ...

class FindSurfaceFeatures(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, feature_attribute_matrix_path: DataPath = ..., feature_geometry_path: DataPath = ..., feature_ids_path: DataPath = ..., mark_feature_0_neighbors: bool = ..., surface_features_array_path: str = ...) -> IFilter.ExecuteResult: ...

class FindTriangleGeomCentroidsFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, centroids_array_name: str = ..., face_labels_array_path: DataPath = ..., feature_attribute_matrix_name: DataPath = ..., triangle_geometry_path: DataPath = ...) -> IFilter.ExecuteResult: ...

class FindTriangleGeomSizesFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, face_labels_array_path: DataPath = ..., feature_attribute_matrix_name: DataPath = ..., triangle_geometry_path: DataPath = ..., volumes_array_name: str = ...) -> IFilter.ExecuteResult: ...

class FindVertexToTriangleDistancesFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, closest_triangle_id_array_path: str = ..., distances_array_path: str = ..., triangle_data_container: DataPath = ..., triangle_normals_array_path: DataPath = ..., vertex_data_container: DataPath = ...) -> IFilter.ExecuteResult: ...

class FindVolFractionsFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, cell_ensemble_attribute_matrix_path: DataPath = ..., cell_phases_array_path: DataPath = ..., vol_fractions_array_path: str = ...) -> IFilter.ExecuteResult: ...

class Float32AbstractDataStore(IDataStore):
    def __init__(self, *args, **kwargs) -> None: ...

class Float32Array(IDataArray):
    dtype: ClassVar[dtype] = ...  # read-only
    def __init__(self, *args, **kwargs) -> None: ...

class Float32DataStore(Float32AbstractDataStore):
    dtype: ClassVar[dtype] = ...  # read-only
    def __init__(self, tuple_shape: List[int], component_shape: List[int], init_value: Optional[float] = ...) -> None: ...
    def npview(self) -> numpy.ndarray[numpy.float32]: ...
    def __getitem__(self, arg0: int) -> float: ...
    def __len__(self) -> int: ...

class Float32Parameter(IParameter):
    def __init__(self, arg0: str, arg1: str, arg2: str, arg3: float) -> None: ...

class Float64AbstractDataStore(IDataStore):
    def __init__(self, *args, **kwargs) -> None: ...

class Float64Array(IDataArray):
    dtype: ClassVar[dtype] = ...  # read-only
    def __init__(self, *args, **kwargs) -> None: ...

class Float64DataStore(Float64AbstractDataStore):
    dtype: ClassVar[dtype] = ...  # read-only
    def __init__(self, tuple_shape: List[int], component_shape: List[int], init_value: Optional[float] = ...) -> None: ...
    def npview(self) -> numpy.ndarray[numpy.float64]: ...
    def __getitem__(self, arg0: int) -> float: ...
    def __len__(self) -> int: ...

class Float64Parameter(IParameter):
    def __init__(self, arg0: str, arg1: str, arg2: str, arg3: float) -> None: ...

class GenerateColorTableFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, rgb_array_path: str = ..., selected_data_array_path: DataPath = ..., selected_preset: Json = ...) -> IFilter.ExecuteResult: ...

class GenerateColorTableParameter(IParameter):
    def __init__(self, name: str, human_name: str, help_text: str, default_value: Json) -> None: ...

class GeneratedFileListParameter(IParameter):
    class Ordering:
        __members__: ClassVar[dict] = ...  # read-only
        HighToLow: ClassVar[GeneratedFileListParameter.Ordering] = ...
        LowToHigh: ClassVar[GeneratedFileListParameter.Ordering] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __getstate__(self) -> int: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        def __setstate__(self, state: int) -> None: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...

    class ValueType:
        end_index: int
        file_extension: str
        file_prefix: str
        file_suffix: str
        increment_index: int
        input_path: str
        ordering: GeneratedFileListParameter.Ordering
        padding_digits: int
        start_index: int
        def __init__(self) -> None: ...
        def generate(self) -> List[str]: ...
        def generate_and_validate(self, arg0: bool) -> Tuple[List[str],bool]: ...
    def __init__(self, name: str, human_name: str, help_text: str, default_value: GeneratedFileListParameter.ValueType) -> None: ...

class GeometrySelectionParameter(IParameter):
    def __init__(self, name: str, human_name: str, help_text: str, default_value: DataPath, allowed_types: Set[IGeometry.Type]) -> None: ...

class HexahedralGeom(INodeGeometry3D):
    def __init__(self, *args, **kwargs) -> None: ...

class IArray(DataObject):
    class ArrayType:
        __members__: ClassVar[dict] = ...  # read-only
        Any: ClassVar[IArray.ArrayType] = ...
        DataArray: ClassVar[IArray.ArrayType] = ...
        NeighborListArray: ClassVar[IArray.ArrayType] = ...
        StringArray: ClassVar[IArray.ArrayType] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __getstate__(self) -> int: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        def __setstate__(self, state: int) -> None: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def component_shape(self) -> List[int]: ...
    @property
    def tuple_shape(self) -> List[int]: ...

class IArrayThreshold:
    class UnionOperator:
        __members__: ClassVar[dict] = ...  # read-only
        And: ClassVar[IArrayThreshold.UnionOperator] = ...
        Or: ClassVar[IArrayThreshold.UnionOperator] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __getstate__(self) -> int: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        def __setstate__(self, state: int) -> None: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...
    inverted: bool
    union_op: IArrayThreshold.UnionOperator
    def __init__(self, *args, **kwargs) -> None: ...
    def get_required_paths(self) -> Set[DataPath]: ...

class IDataAction:
    class Mode:
        __members__: ClassVar[dict] = ...  # read-only
        Execute: ClassVar[IDataAction.Mode] = ...
        Preflight: ClassVar[IDataAction.Mode] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __getstate__(self) -> int: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        def __setstate__(self, state: int) -> None: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def apply(self, arg0: DataStructure, arg1: IDataAction.Mode) -> Result: ...

class IDataArray(IArray):
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def cdims(self) -> List[int]: ...
    @property
    def store(self) -> IDataStore: ...
    @property
    def tdims(self) -> List[int]: ...

class IDataCreationAction(IDataAction):
    class ArrayHandlingType:
        __members__: ClassVar[dict] = ...  # read-only
        Copy: ClassVar[IDataCreationAction.ArrayHandlingType] = ...
        Create: ClassVar[IDataCreationAction.ArrayHandlingType] = ...
        Move: ClassVar[IDataCreationAction.ArrayHandlingType] = ...
        Reference: ClassVar[IDataCreationAction.ArrayHandlingType] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __getstate__(self) -> int: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        def __setstate__(self, state: int) -> None: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...
    def __init__(self, *args, **kwargs) -> None: ...

class IDataStore:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def cdims(self) -> List[int]: ...
    @property
    def data_type(self) -> DataType: ...
    @property
    def tdims(self) -> List[int]: ...

class IFilter:
    class ExecuteResult:
        def __init__(self) -> None: ...
        def __bool__(self) -> bool: ...
        @property
        def errors(self) -> List[Error]: ...
        @property
        def warnings(self) -> List[Warning]: ...

    class Message:
        class Type:
            __members__: ClassVar[dict] = ...  # read-only
            Debug: ClassVar[IFilter.Message.Type] = ...
            Error: ClassVar[IFilter.Message.Type] = ...
            Info: ClassVar[IFilter.Message.Type] = ...
            Progress: ClassVar[IFilter.Message.Type] = ...
            Warning: ClassVar[IFilter.Message.Type] = ...
            __entries: ClassVar[dict] = ...
            def __init__(self, value: int) -> None: ...
            def __eq__(self, other: object) -> bool: ...
            def __getstate__(self) -> int: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> int: ...
            def __int__(self) -> int: ...
            def __ne__(self, other: object) -> bool: ...
            def __setstate__(self, state: int) -> None: ...
            @property
            def name(self) -> str: ...
            @property
            def value(self) -> int: ...
        message: str
        type: IFilter.Message.Type
        @overload
        def __init__(self) -> None: ...
        @overload
        def __init__(self, arg0: IFilter.Message.Type, arg1: str) -> None: ...

    class MessageHandler:
        callback: Callable[[IFilter.Message],None]
        def __init__(self) -> None: ...
        def __call__(self, arg0: IFilter.Message) -> None: ...

    class PreflightResult:
        output_values: List[IFilter.PreflightValue]
        @overload
        def __init__(self) -> None: ...
        @overload
        def __init__(self, output_actions: Optional[OutputActions] = ..., errors: Optional[List[Error]] = ..., warnings: Optional[List[Warning]] = ..., preflight_values: Optional[List[IFilter.PreflightValue]] = ...) -> None: ...
        def get_result(self) -> List[Error]: ...
        def set_errors(self, arg0: List[Error]) -> None: ...

    class PreflightValue:
        name: str
        value: str
        def __init__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def execute2(self, data_structure: DataStructure, **kwargs) -> IFilter.ExecuteResult: ...
    def human_name(self) -> str: ...
    def name(self) -> str: ...
    def preflight2(self, arg0: DataStructure, **kwargs) -> IFilter.PreflightResult: ...
    def uuid(self) -> Uuid: ...

class IGeometry(BaseGroup):
    class Type:
        __members__: ClassVar[dict] = ...  # read-only
        Edge: ClassVar[IGeometry.Type] = ...
        Hexahedral: ClassVar[IGeometry.Type] = ...
        Image: ClassVar[IGeometry.Type] = ...
        Quad: ClassVar[IGeometry.Type] = ...
        RectGrid: ClassVar[IGeometry.Type] = ...
        Tetrahedral: ClassVar[IGeometry.Type] = ...
        Triangle: ClassVar[IGeometry.Type] = ...
        Vertex: ClassVar[IGeometry.Type] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __getstate__(self) -> int: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        def __setstate__(self, state: int) -> None: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...
    def __init__(self, *args, **kwargs) -> None: ...

class IGridGeometry(IGeometry):
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def dimensions(self) -> Tuple[int,int,int]: ...
    @property
    def num_x_cells(self) -> int: ...
    @property
    def num_y_cells(self) -> int: ...
    @property
    def num_z_cells(self) -> int: ...

class INodeGeometry0D(IGeometry):
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def vertex_data(self) -> AttributeMatrix: ...
    @property
    def vertices(self) -> Float32Array: ...

class INodeGeometry1D(INodeGeometry0D):
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def edge_data(self) -> AttributeMatrix: ...
    @property
    def edges(self) -> UInt64Array: ...

class INodeGeometry2D(INodeGeometry1D):
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def face_data(self) -> AttributeMatrix: ...
    @property
    def faces(self) -> UInt64Array: ...

class INodeGeometry3D(INodeGeometry2D):
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def polyhedra(self) -> UInt64Array: ...
    @property
    def polyhedra_data(self) -> AttributeMatrix: ...

class IParameter:
    class Type:
        __members__: ClassVar[dict] = ...  # read-only
        Data: ClassVar[IParameter.Type] = ...
        Value: ClassVar[IParameter.Type] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __getstate__(self) -> int: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        def __setstate__(self, state: int) -> None: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def help_text(self) -> str: ...
    @property
    def human_name(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def type(self) -> IParameter.Type: ...
    @property
    def uuid(self) -> Uuid: ...

class IdentifySample(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, fill_holes: bool = ..., good_voxels: DataPath = ..., image_geometry: DataPath = ...) -> IFilter.ExecuteResult: ...

class ImageContouringFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, iso_val_geometry: float = ..., new_triangle_geometry_name: str = ..., selected_data_array: DataPath = ..., selected_image_geometry: DataPath = ...) -> IFilter.ExecuteResult: ...

class ImageGeom(IGridGeometry):
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def origin(self) -> Tuple[float,float,float]: ...
    @property
    def spacing(self) -> Tuple[float,float,float]: ...

class ImportBinaryCTNorthstarFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, cell_attribute_matrix_name: str = ..., density_array_name: str = ..., end_voxel_coord: List[int] = ..., image_geometry_path: DataPath = ..., import_subvolume: bool = ..., input_header_file: os.PathLike = ..., length_unit: int = ..., start_voxel_coord: List[int] = ...) -> IFilter.ExecuteResult: ...

class ImportCSVDataFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, created_data_group: DataPath = ..., selected_data_group: DataPath = ..., tuple_dimensions: List[List[float]] = ..., use_existing_group: bool = ..., wizard_data: CSVWizardData = ...) -> IFilter.ExecuteResult: ...

class ImportCSVDataParameter(IParameter):
    def __init__(self, name: str, human_name: str, help_text: str, default_value: CSVWizardData) -> None: ...

class ImportDREAM3DFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, import_file_data: Dream3dImportParameter.ImportData = ...) -> IFilter.ExecuteResult: ...

class ImportH5ObjectPathsAction(IDataCreationAction):
    def __init__(self, import_file: os.PathLike, paths: Optional[List[DataPath]]) -> None: ...

class ImportHDF5Dataset(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, import_hd_f5_file: ImportHDF5DatasetParameter.ValueType = ...) -> IFilter.ExecuteResult: ...

class ImportHDF5DatasetParameter(IParameter):
    class DatasetImportInfo:
        component_dims: str
        dataset_path: str
        tuple_dims: str
        def __init__(self) -> None: ...

    class ValueType:
        datasets: List[ImportHDF5DatasetParameter.DatasetImportInfo]
        input_file: str
        parent: Optional[DataPath]
        def __init__(self) -> None: ...
    def __init__(self, name: str, human_name: str, help_text: str, default_value: ImportHDF5DatasetParameter.ValueType) -> None: ...

class ImportTextFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, advanced_options: bool = ..., data_format: str = ..., delimiter_choice: int = ..., input_file: os.PathLike = ..., n_comp: int = ..., n_skip_lines: int = ..., n_tuples: List[List[float]] = ..., output_data_array: DataPath = ..., scalar_type: NumericType = ...) -> IFilter.ExecuteResult: ...

class ImportVolumeGraphicsFileFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, cell_attribute_matrix_name: str = ..., density_array_name: str = ..., new_image_geometry: DataPath = ..., vg_header_file: os.PathLike = ...) -> IFilter.ExecuteResult: ...

class InitializeData(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, cell_arrays: List[DataPath] = ..., image_geom_path: DataPath = ..., init_range: List[float] = ..., init_type: int = ..., init_value: float = ..., max_point: List[int] = ..., min_point: List[int] = ...) -> IFilter.ExecuteResult: ...

class Int16AbstractDataStore(IDataStore):
    def __init__(self, *args, **kwargs) -> None: ...

class Int16Array(IDataArray):
    dtype: ClassVar[dtype] = ...  # read-only
    def __init__(self, *args, **kwargs) -> None: ...

class Int16DataStore(Int16AbstractDataStore):
    dtype: ClassVar[dtype] = ...  # read-only
    def __init__(self, tuple_shape: List[int], component_shape: List[int], init_value: Optional[int] = ...) -> None: ...
    def npview(self) -> numpy.ndarray[numpy.int16]: ...
    def __getitem__(self, arg0: int) -> int: ...
    def __len__(self) -> int: ...

class Int16Parameter(IParameter):
    def __init__(self, arg0: str, arg1: str, arg2: str, arg3: int) -> None: ...

class Int32AbstractDataStore(IDataStore):
    def __init__(self, *args, **kwargs) -> None: ...

class Int32Array(IDataArray):
    dtype: ClassVar[dtype] = ...  # read-only
    def __init__(self, *args, **kwargs) -> None: ...

class Int32DataStore(Int32AbstractDataStore):
    dtype: ClassVar[dtype] = ...  # read-only
    def __init__(self, tuple_shape: List[int], component_shape: List[int], init_value: Optional[int] = ...) -> None: ...
    def npview(self) -> numpy.ndarray[numpy.int32]: ...
    def __getitem__(self, arg0: int) -> int: ...
    def __len__(self) -> int: ...

class Int32Parameter(IParameter):
    def __init__(self, arg0: str, arg1: str, arg2: str, arg3: int) -> None: ...

class Int64AbstractDataStore(IDataStore):
    def __init__(self, *args, **kwargs) -> None: ...

class Int64Array(IDataArray):
    dtype: ClassVar[dtype] = ...  # read-only
    def __init__(self, *args, **kwargs) -> None: ...

class Int64DataStore(Int64AbstractDataStore):
    dtype: ClassVar[dtype] = ...  # read-only
    def __init__(self, tuple_shape: List[int], component_shape: List[int], init_value: Optional[int] = ...) -> None: ...
    def npview(self) -> numpy.ndarray[numpy.int64]: ...
    def __getitem__(self, arg0: int) -> int: ...
    def __len__(self) -> int: ...

class Int64Parameter(IParameter):
    def __init__(self, arg0: str, arg1: str, arg2: str, arg3: int) -> None: ...

class Int8AbstractDataStore(IDataStore):
    def __init__(self, *args, **kwargs) -> None: ...

class Int8Array(IDataArray):
    dtype: ClassVar[dtype] = ...  # read-only
    def __init__(self, *args, **kwargs) -> None: ...

class Int8DataStore(Int8AbstractDataStore):
    dtype: ClassVar[dtype] = ...  # read-only
    def __init__(self, tuple_shape: List[int], component_shape: List[int], init_value: Optional[int] = ...) -> None: ...
    def npview(self) -> numpy.ndarray[numpy.int8]: ...
    def __getitem__(self, arg0: int) -> int: ...
    def __len__(self) -> int: ...

class Int8Parameter(IParameter):
    def __init__(self, arg0: str, arg1: str, arg2: str, arg3: int) -> None: ...

class InterpolatePointCloudToRegularGridFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, copy_arrays: List[DataPath] = ..., guassian_sigmas: List[float] = ..., image_geom: DataPath = ..., interpolate_arrays: List[DataPath] = ..., interpolated_group: str = ..., interpolation_technique: int = ..., kernel_distances_array: str = ..., kernel_size: List[float] = ..., mask: DataPath = ..., store_kernel_distances: bool = ..., use_mask: bool = ..., vertex_geom: DataPath = ..., voxel_indices: DataPath = ...) -> IFilter.ExecuteResult: ...

class IterativeClosestPointFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, apply_transformation: bool = ..., moving_vertex: DataPath = ..., num_iterations: int = ..., target_vertex: DataPath = ..., transform_array: DataPath = ...) -> IFilter.ExecuteResult: ...

class Json:
    def __init__(self, text: str) -> None: ...

class LaplacianSmoothingFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, iteration_steps: int = ..., lambda_value: float = ..., mu_factor: float = ..., quad_point_lambda: float = ..., surface_mesh_node_type_array_path: DataPath = ..., surface_point_lambda: float = ..., surface_quad_point_lambda: float = ..., surface_triple_line_lambda: float = ..., triangle_geometry_data_path: DataPath = ..., triple_line_lambda: float = ..., use_taubin_smoothing: bool = ...) -> IFilter.ExecuteResult: ...

class MapPointCloudToRegularGridFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, cell_data_name: str = ..., existing_image_geometry: DataPath = ..., grid_dimensions: List[int] = ..., mask: DataPath = ..., new_image_geometry: DataPath = ..., sampling_grid_type: int = ..., use_mask: bool = ..., vertex_geometry: DataPath = ..., voxel_indices: str = ...) -> IFilter.ExecuteResult: ...

class MinNeighbors(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, apply_to_single_phase: bool = ..., cell_attribute_matrix: DataPath = ..., feature_ids: DataPath = ..., feature_phases: DataPath = ..., ignored_voxel_arrays: List[DataPath] = ..., image_geom: DataPath = ..., min_num_neighbors: int = ..., num_neighbors: DataPath = ..., phase_number: int = ...) -> IFilter.ExecuteResult: ...

class MoveData(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, data: List[DataPath] = ..., new_parent: DataPath = ...) -> IFilter.ExecuteResult: ...

class MoveDataAction(IDataAction):
    def __init__(self, path: DataPath, new_parent_path: DataPath) -> None: ...

class MultiArraySelectionParameter(IParameter):
    def __init__(self, name: str, human_name: str, help_text: str, default_value: List[DataPath], allowed_types: Set[IArray.ArrayType], allowed_data_types: Set[DataType], required_comps: List[List[int]] = ...) -> None: ...

class MultiPathSelectionParameter(IParameter):
    def __init__(self, name: str, human_name: str, help_text: str, default_value: List[DataPath]) -> None: ...

class MultiThresholdObjects(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, array_thresholds: ArrayThresholdSet = ..., created_data_path: str = ..., created_mask_type: DataType = ...) -> IFilter.ExecuteResult: ...

class NearestPointFuseRegularGridsFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, fill_value: float = ..., reference_cell_attribute_matrix_path: DataPath = ..., reference_geometry_path: DataPath = ..., sampling_cell_attribute_matrix_path: DataPath = ..., sampling_geometry_path: DataPath = ..., use_fill: bool = ...) -> IFilter.ExecuteResult: ...

class NeighborListSelectionParameter(IParameter):
    def __init__(self, name: str, human_name: str, help_text: str, default_value: DataPath, allowed_types: Set[DataType]) -> None: ...

class NumericType:
    __members__: ClassVar[dict] = ...  # read-only
    __entries: ClassVar[dict] = ...
    float32: ClassVar[NumericType] = ...
    float64: ClassVar[NumericType] = ...
    int16: ClassVar[NumericType] = ...
    int32: ClassVar[NumericType] = ...
    int64: ClassVar[NumericType] = ...
    int8: ClassVar[NumericType] = ...
    uint16: ClassVar[NumericType] = ...
    uint32: ClassVar[NumericType] = ...
    uint64: ClassVar[NumericType] = ...
    uint8: ClassVar[NumericType] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class NumericTypeParameter(IParameter):
    def __init__(self, name: str, human_name: str, help_text: str, default_value: NumericType) -> None: ...

class OutputActions:
    def __init__(self) -> None: ...
    def append_action(self, arg0: IDataAction) -> None: ...
    def append_deferred_action(self, arg0: IDataAction) -> None: ...

class Parameters:
    class Separator:
        name: str
        @overload
        def __init__(self) -> None: ...
        @overload
        def __init__(self, name: str) -> None: ...
    def __init__(self) -> None: ...
    @overload
    def insert(self, arg0: IParameter) -> None: ...
    @overload
    def insert(self, arg0: Parameters.Separator) -> None: ...
    @overload
    def insert_linkable_parameter(self, arg0) -> None: ...
    @overload
    def insert_linkable_parameter(self, arg0) -> None: ...
    @overload
    def link_parameters(self, arg0: str, arg1: str, arg2: bool) -> None: ...
    @overload
    def link_parameters(self, arg0: str, arg1: str, arg2: int) -> None: ...
    def __getitem__(self, arg0: str) -> IParameter: ...

class PartitionGeometryFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, existing_partitioning_scheme_path: DataPath = ..., feature_attr_matrix_name: str = ..., geometry_to_partition: DataPath = ..., length_per_partition: List[float] = ..., lower_left_coord: List[float] = ..., number_of_partitions_per_axis: List[int] = ..., out_of_bounds_value: int = ..., partition_ids_array_name: str = ..., partitioning_mode: int = ..., partitioning_scheme_origin: List[float] = ..., ps_attribute_matrix_path: DataPath = ..., ps_geometry: DataPath = ..., ps_geometry_am_name: str = ..., ps_geometry_data_name: str = ..., starting_partition_id: int = ..., upper_right_coord: List[float] = ..., use_vertex_mask: bool = ..., vertex_mask_path: DataPath = ...) -> IFilter.ExecuteResult: ...

class Pipeline(AbstractPipelineNode):
    def __init__(self, name: str = ...) -> None: ...
    def append(self, filter: IFilter, args: dict = ...) -> None: ...
    def clear(self) -> None: ...
    def execute(self, arg0: DataStructure) -> Result: ...
    @classmethod
    def from_file(cls, path: os.PathLike) -> Pipeline: ...
    def insert(self, index: int, filter: IFilter, args: dict = ...) -> None: ...
    def remove(self, index: int) -> bool: ...
    def size(self) -> int: ...
    def __getitem__(self, arg0: int) -> AbstractPipelineNode: ...
    def __iter__(self) -> Iterator: ...
    def __len__(self) -> int: ...

class PipelineFilter(AbstractPipelineNode):
    def __init__(self, *args, **kwargs) -> None: ...
    def get_args(self) -> dict: ...
    def get_filter(self) -> IFilter: ...
    def set_args(self, args: dict) -> None: ...

class PointSampleTriangleGeometryFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, mask_array_path: DataPath = ..., number_of_samples: int = ..., selected_data_array_paths: List[DataPath] = ..., triangle_areas_array_path: DataPath = ..., triangle_geometry_path: DataPath = ..., use_mask: bool = ..., vertex_data_group_path: str = ..., vertex_geometry_path: DataPath = ...) -> IFilter.ExecuteResult: ...

class PyFilter(IFilter):
    def __init__(self, arg0: object) -> None: ...

class PythonPlugin(AbstractPlugin):
    def __init__(self, *args, **kwargs) -> None: ...

class QuadGeom(INodeGeometry2D):
    def __init__(self, *args, **kwargs) -> None: ...

class QuickSurfaceMeshFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, face_data_group_name: str = ..., face_feature_attribute_matrix_name: str = ..., face_labels_array_name: str = ..., feature_ids_path: DataPath = ..., fix_problem_voxels: bool = ..., generate_triple_lines: bool = ..., grid_geometry_data_path: DataPath = ..., node_types_array_name: str = ..., selected_data_array_paths: List[DataPath] = ..., triangle_geometry_name: DataPath = ..., vertex_data_group_name: str = ...) -> IFilter.ExecuteResult: ...

class RawBinaryReaderFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, created_attribute_array_path: DataPath = ..., endian: int = ..., input_file: os.PathLike = ..., number_of_components: int = ..., scalar_type: NumericType = ..., skip_header_bytes: int = ..., tuple_dimensions: List[List[float]] = ...) -> IFilter.ExecuteResult: ...

class RectGridGeom(IGridGeometry):
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def x_bounds(self) -> Float32Array: ...
    @property
    def y_bounds(self) -> Float32Array: ...
    @property
    def z_bounds(self) -> Float32Array: ...

class RegularGridSampleSurfaceMeshFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, cell_attribute_matrix_name: str = ..., dimensions: List[int] = ..., feature_ids_array_name: str = ..., image_geom_path: DataPath = ..., length_unit: int = ..., origin: List[float] = ..., spacing: List[float] = ..., surface_mesh_face_labels_array_path: DataPath = ..., triangle_geometry_path: DataPath = ...) -> IFilter.ExecuteResult: ...

class RemoveFlaggedFeaturesFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, created_image_geometry_prefix: str = ..., feature_ids_path: DataPath = ..., fill_removed_features: bool = ..., flagged_features_array_path: DataPath = ..., functionality: int = ..., ignored_data_array_paths: List[DataPath] = ..., image_geometry: DataPath = ...) -> IFilter.ExecuteResult: ...

class RemoveFlaggedVertices(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, mask: DataPath = ..., reduced_vertex: DataPath = ..., vertex_geom: DataPath = ...) -> IFilter.ExecuteResult: ...

class RemoveMinimumSizeFeaturesFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, apply_single_phase: bool = ..., feature_ids_path: DataPath = ..., feature_phases_path: DataPath = ..., image_geom_path: DataPath = ..., min_allowed_features_size: int = ..., num_cells_path: DataPath = ..., phase_number: int = ...) -> IFilter.ExecuteResult: ...

class RenameDataAction(IDataAction):
    def __init__(self, path: DataPath, new_name: str) -> None: ...

class RenameDataObject(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, data_object: DataPath = ..., new_name: str = ...) -> IFilter.ExecuteResult: ...

class ReplaceElementAttributesWithNeighborValuesFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, confidence_index_array_path: DataPath = ..., loop: bool = ..., min_confidence: float = ..., selected_comparison: int = ..., selected_image_geometry: DataPath = ...) -> IFilter.ExecuteResult: ...

class ResampleImageGeomFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, cell_feature_attribute_matrix_path: DataPath = ..., feature_ids_path: DataPath = ..., new_data_container_path: DataPath = ..., remove_original_geometry: bool = ..., renumber_features: bool = ..., selected_image_geometry: DataPath = ..., spacing: List[float] = ...) -> IFilter.ExecuteResult: ...

class ResampleRectGridToImageGeomFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, dimensions: List[int] = ..., image_geom_cell_attribute_matrix: str = ..., image_geometry_path: DataPath = ..., rectilinear_grid_path: DataPath = ..., selected_data_array_paths: List[DataPath] = ...) -> IFilter.ExecuteResult: ...

class Result:
    def __init__(self, errors: Optional[List[Error]] = ..., warnings: Optional[List[Warning]] = ...) -> None: ...
    @property
    def errors(self) -> List[Error]: ...
    @property
    def warnings(self) -> List[Warning]: ...

class RobustAutomaticThreshold(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, array_to_threshold: DataPath = ..., created_mask_path: str = ..., gradient_array: DataPath = ...) -> IFilter.ExecuteResult: ...

class RotateSampleRefFrameFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, created_image_geometry: DataPath = ..., remove_original_geometry: bool = ..., rotate_slice_by_slice: bool = ..., rotation_axis: List[float] = ..., rotation_matrix: List[List[float]] = ..., rotation_representation: int = ..., selected_image_geometry: DataPath = ...) -> IFilter.ExecuteResult: ...

class ScalarSegmentFeaturesFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, active_array_path: str = ..., cell_feature_group_path: str = ..., feature_ids_path: str = ..., grid_geometry_path: DataPath = ..., input_array_path: DataPath = ..., mask_path: DataPath = ..., randomize_features: bool = ..., scalar_tolerance: int = ..., use_mask: bool = ...) -> IFilter.ExecuteResult: ...

class SetImageGeomOriginScalingFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, change_origin: bool = ..., change_resolution: bool = ..., image_geom: DataPath = ..., origin: List[float] = ..., spacing: List[float] = ...) -> IFilter.ExecuteResult: ...

class SharedFeatureFaceFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, face_labels_array_path: DataPath = ..., feature_face_ids_array_name: str = ..., feature_face_labels_array_name: str = ..., feature_num_triangles_array_name: str = ..., grain_boundary_attribute_matrix_name: str = ..., randomize_features: bool = ..., triangle_geometry_path: DataPath = ...) -> IFilter.ExecuteResult: ...

class SplitAttributeArrayFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, components_to_extract: List[List[float]] = ..., delete_original_array: bool = ..., multicomponent_array: DataPath = ..., postfix: str = ..., select_components_to_extract: bool = ...) -> IFilter.ExecuteResult: ...

class StlFileReaderFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, face_matrix: str = ..., geometry_data_path: DataPath = ..., scale_factor: float = ..., scale_output: bool = ..., shared_face_matrix: str = ..., shared_vertex_matrix: str = ..., stl_file_path: os.PathLike = ..., vertex_matrix: str = ...) -> IFilter.ExecuteResult: ...

class StringParameter(IParameter):
    def __init__(self, name: str, human_name: str, help_text: str, default_value: str) -> None: ...

class TetrahedralGeom(INodeGeometry3D):
    def __init__(self, *args, **kwargs) -> None: ...

class TriangleCentroidFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, centroids_array_name: str = ..., triangle_geometry_path: DataPath = ...) -> IFilter.ExecuteResult: ...

class TriangleDihedralAngleFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, surface_mesh_triangle_dihedral_angles_array_name: str = ..., tri_geometry_data_path: DataPath = ...) -> IFilter.ExecuteResult: ...

class TriangleGeom(INodeGeometry2D):
    def __init__(self, *args, **kwargs) -> None: ...

class TriangleNormalFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, surface_mesh_triangle_normals_array_path: str = ..., tri_geometry_data_path: DataPath = ...) -> IFilter.ExecuteResult: ...

class UInt16AbstractDataStore(IDataStore):
    def __init__(self, *args, **kwargs) -> None: ...

class UInt16Array(IDataArray):
    dtype: ClassVar[dtype] = ...  # read-only
    def __init__(self, *args, **kwargs) -> None: ...

class UInt16DataStore(UInt16AbstractDataStore):
    dtype: ClassVar[dtype] = ...  # read-only
    def __init__(self, tuple_shape: List[int], component_shape: List[int], init_value: Optional[int] = ...) -> None: ...
    def npview(self) -> numpy.ndarray[numpy.uint16]: ...
    def __getitem__(self, arg0: int) -> int: ...
    def __len__(self) -> int: ...

class UInt16Parameter(IParameter):
    def __init__(self, arg0: str, arg1: str, arg2: str, arg3: int) -> None: ...

class UInt32AbstractDataStore(IDataStore):
    def __init__(self, *args, **kwargs) -> None: ...

class UInt32Array(IDataArray):
    dtype: ClassVar[dtype] = ...  # read-only
    def __init__(self, *args, **kwargs) -> None: ...

class UInt32DataStore(UInt32AbstractDataStore):
    dtype: ClassVar[dtype] = ...  # read-only
    def __init__(self, tuple_shape: List[int], component_shape: List[int], init_value: Optional[int] = ...) -> None: ...
    def npview(self) -> numpy.ndarray[numpy.uint32]: ...
    def __getitem__(self, arg0: int) -> int: ...
    def __len__(self) -> int: ...

class UInt32Parameter(IParameter):
    def __init__(self, arg0: str, arg1: str, arg2: str, arg3: int) -> None: ...

class UInt64AbstractDataStore(IDataStore):
    def __init__(self, *args, **kwargs) -> None: ...

class UInt64Array(IDataArray):
    dtype: ClassVar[dtype] = ...  # read-only
    def __init__(self, *args, **kwargs) -> None: ...

class UInt64DataStore(UInt64AbstractDataStore):
    dtype: ClassVar[dtype] = ...  # read-only
    def __init__(self, tuple_shape: List[int], component_shape: List[int], init_value: Optional[int] = ...) -> None: ...
    def npview(self) -> numpy.ndarray[numpy.uint64]: ...
    def __getitem__(self, arg0: int) -> int: ...
    def __len__(self) -> int: ...

class UInt64Parameter(IParameter):
    def __init__(self, arg0: str, arg1: str, arg2: str, arg3: int) -> None: ...

class UInt8AbstractDataStore(IDataStore):
    def __init__(self, *args, **kwargs) -> None: ...

class UInt8Array(IDataArray):
    dtype: ClassVar[dtype] = ...  # read-only
    def __init__(self, *args, **kwargs) -> None: ...

class UInt8DataStore(UInt8AbstractDataStore):
    dtype: ClassVar[dtype] = ...  # read-only
    def __init__(self, tuple_shape: List[int], component_shape: List[int], init_value: Optional[int] = ...) -> None: ...
    def npview(self) -> numpy.ndarray[numpy.uint8]: ...
    def __getitem__(self, arg0: int) -> int: ...
    def __len__(self) -> int: ...

class UInt8Parameter(IParameter):
    def __init__(self, arg0: str, arg1: str, arg2: str, arg3: int) -> None: ...

class UncertainRegularGridSampleSurfaceMeshFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, cell_attribute_matrix_name: str = ..., dimensions: List[int] = ..., feature_ids_array_name: str = ..., image_geom_path: DataPath = ..., origin: List[float] = ..., seed_value: int = ..., spacing: List[float] = ..., surface_mesh_face_labels_array_path: DataPath = ..., triangle_geometry_path: DataPath = ..., uncertainty: List[float] = ..., use_seed: bool = ...) -> IFilter.ExecuteResult: ...

class UpdateImageGeomAction(IDataAction):
    def __init__(self, origin, spacing, path: DataPath) -> None: ...

class Uuid:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: str) -> None: ...
    def __getitem__(self, arg0: int) -> int: ...
    def __len__(self) -> int: ...
    def __setitem__(self, arg0: int, arg1: int) -> None: ...
    @property
    def bytes(self) -> bytes: ...

class VectorFloat32Parameter(IParameter):
    @overload
    def __init__(self, arg0: str, arg1: str, arg2: str, arg3: List[float]) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: str, arg2: str, arg3: List[float], arg4: List[str]) -> None: ...

class VectorFloat64Parameter(IParameter):
    @overload
    def __init__(self, arg0: str, arg1: str, arg2: str, arg3: List[float]) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: str, arg2: str, arg3: List[float], arg4: List[str]) -> None: ...

class VectorInt16Parameter(IParameter):
    @overload
    def __init__(self, arg0: str, arg1: str, arg2: str, arg3: List[int]) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: str, arg2: str, arg3: List[int], arg4: List[str]) -> None: ...

class VectorInt32Parameter(IParameter):
    @overload
    def __init__(self, arg0: str, arg1: str, arg2: str, arg3: List[int]) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: str, arg2: str, arg3: List[int], arg4: List[str]) -> None: ...

class VectorInt64Parameter(IParameter):
    @overload
    def __init__(self, arg0: str, arg1: str, arg2: str, arg3: List[int]) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: str, arg2: str, arg3: List[int], arg4: List[str]) -> None: ...

class VectorInt8Parameter(IParameter):
    @overload
    def __init__(self, arg0: str, arg1: str, arg2: str, arg3: List[int]) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: str, arg2: str, arg3: List[int], arg4: List[str]) -> None: ...

class VectorUInt16Parameter(IParameter):
    @overload
    def __init__(self, arg0: str, arg1: str, arg2: str, arg3: List[int]) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: str, arg2: str, arg3: List[int], arg4: List[str]) -> None: ...

class VectorUInt32Parameter(IParameter):
    @overload
    def __init__(self, arg0: str, arg1: str, arg2: str, arg3: List[int]) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: str, arg2: str, arg3: List[int], arg4: List[str]) -> None: ...

class VectorUInt64Parameter(IParameter):
    @overload
    def __init__(self, arg0: str, arg1: str, arg2: str, arg3: List[int]) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: str, arg2: str, arg3: List[int], arg4: List[str]) -> None: ...

class VectorUInt8Parameter(IParameter):
    @overload
    def __init__(self, arg0: str, arg1: str, arg2: str, arg3: List[int]) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: str, arg2: str, arg3: List[int], arg4: List[str]) -> None: ...

class VertexGeom(INodeGeometry0D):
    def __init__(self, *args, **kwargs) -> None: ...

class VtkRectilinearGridWriterFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, image_geometry_path: DataPath = ..., output_file: os.PathLike = ..., selected_data_array_paths: List[DataPath] = ..., write_binary_file: bool = ...) -> IFilter.ExecuteResult: ...

class Warning:
    code: int
    message: str
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: int, arg1: str) -> None: ...

class WriteASCIIDataFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, delimiter: int = ..., file_extension: str = ..., includes: int = ..., max_val_per_line: int = ..., output_dir: os.PathLike = ..., output_path: os.PathLike = ..., output_style: int = ..., selected_data_array_paths: List[DataPath] = ...) -> IFilter.ExecuteResult: ...

class WriteBinaryDataFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, endianess: int = ..., file_extension: str = ..., output_path: os.PathLike = ..., selected_data_array_paths: List[DataPath] = ...) -> IFilter.ExecuteResult: ...

class WriteStlFileFilter(IFilter):
    def __init__(self) -> None: ...
    @classmethod
    def execute(cls, data_structure: DataStructure, feature_ids_path: DataPath = ..., feature_phases_path: DataPath = ..., group_by_feature: bool = ..., output_stl_directory: os.PathLike = ..., output_stl_prefix: str = ..., triangle_geom_path: DataPath = ...) -> IFilter.ExecuteResult: ...

def convert_numeric_type_to_data_type(arg0: NumericType) -> DataType: ...
def get_all_data_types() -> Set[DataType]: ...
def get_filters() -> List[type]: ...
def get_python_filter_ids() -> List[Uuid]: ...
def get_python_plugins() -> List[AbstractPlugin]: ...
def load_python_plugin(arg0: Any) -> None: ...
def reload_python_plugins() -> None: ...
def test_filter(arg0: IFilter) -> tuple: ...
